
=== File: src/test/java/com/bank/BankAppApplicationTests.java ===
package com.bank;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(classes = BankAppApplicationTests.class)
class BankAppApplicationTests {

	@Test
	void contextLoads() {
	}

}

=== File: src/test/java/com/bank/service/BankServiceConcurrencyTest.java ===
package com.bank.service;

import com.bank.model.User;
import com.bank.repository.RefreshTokenRepository;
import com.bank.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(properties = "spring.profiles.active=test")
public class BankServiceConcurrencyTest {

    @Autowired
    private BankService bankService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RefreshTokenRepository refreshTokenRepository;

    // Add these fields
    private User user1;
    private User user2;

    @BeforeEach
    @Transactional
    public void setup() {
        // Clean up existing test users
        refreshTokenRepository.deleteAll();
        userRepository.deleteAll();

        // Create test users
        user1 = bankService.registerUser("John Doe", "test1@test.com", "1234567890");
        user2 = bankService.registerUser("Jane Doe", "test2@test.com", "1234567891");
    }

    @Test
    public void testConcurrentTransfersSameAmount() throws InterruptedException {
        int numberOfThreads = 5;
        ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads * 2);
        CountDownLatch latch = new CountDownLatch(numberOfThreads * 2);
        AtomicInteger successfulTransfers = new AtomicInteger(0);
        AtomicInteger failedTransfers = new AtomicInteger(0);
        double transferAmount = 50.0;

        // Initial balances
        double initialBalance1 = user1.getBalance();
        double initialBalance2 = user2.getBalance();

        // Synchronize the start of all threads
        CountDownLatch startLatch = new CountDownLatch(1);

        // Start concurrent transfers in both directions
        for (int i = 0; i < numberOfThreads; i++) {
            // Transfer from user1 to user2
            executorService.execute(() -> {
                try {
                    startLatch.await(); // Wait for all threads to be ready
                    bankService.transferFunds(user1.getEmail(), user2.getEmail(), transferAmount);
                    successfulTransfers.incrementAndGet();
                } catch (Exception e) {
                    failedTransfers.incrementAndGet();
                    System.err.println("Transfer failed from user1: " + e.getMessage());
                } finally {
                    latch.countDown();
                }
            });

            // Transfer from user2 to user1
            executorService.execute(() -> {
                try {
                    startLatch.await(); // Wait for all threads to be ready
                    bankService.transferFunds(user2.getEmail(), user1.getEmail(), transferAmount);
                    successfulTransfers.incrementAndGet();
                } catch (Exception e) {
                    failedTransfers.incrementAndGet();
                    System.err.println("Transfer failed from user2: " + e.getMessage());
                } finally {
                    latch.countDown();
                }
            });
        }

        // Start all threads simultaneously
        startLatch.countDown();

        // Wait for all threads to complete
        assertTrue(latch.await(10, TimeUnit.SECONDS), "Timeout waiting for transfers");
        executorService.shutdown();
        assertTrue(executorService.awaitTermination(5, TimeUnit.SECONDS), "Timeout shutting down executor");

        // Refresh user data from database
        User finalUser1 = userRepository.findByEmail(user1.getEmail());
        User finalUser2 = userRepository.findByEmail(user2.getEmail());

        // Print detailed debug information
        System.out.println("Initial balance user1: " + initialBalance1);
        System.out.println("Final balance user1: " + finalUser1.getBalance());
        System.out.println("Initial balance user2: " + initialBalance2);
        System.out.println("Final balance user2: " + finalUser2.getBalance());
        System.out.println("Successful transfers: " + successfulTransfers.get());
        System.out.println("Failed transfers: " + failedTransfers.get());

        // Verify balances with detailed error messages
        assertEquals(initialBalance1, finalUser1.getBalance(), 0.001,
            String.format("User1 balance mismatch. Expected: %.2f, Actual: %.2f", 
                initialBalance1, finalUser1.getBalance()));
        assertEquals(initialBalance2, finalUser2.getBalance(), 0.001,
            String.format("User2 balance mismatch. Expected: %.2f, Actual: %.2f",
                initialBalance2, finalUser2.getBalance()));

        // Assert that all transfers were either successful or failed properly
        assertEquals(numberOfThreads * 2, successfulTransfers.get() + failedTransfers.get(),
            "Total number of operations doesn't match expected count");
    }

    @Test
public void testDeadlockScenario() throws InterruptedException {
    // Create test users
    User user1 = bankService.registerUser("User1", "user1@test.com", "1234567890");
    User user2 = bankService.registerUser("User2", "user2@test.com", "1234567891");
    
    int numberOfThreads = 20;  // Increase number of concurrent threads
    ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads);
    CountDownLatch startLatch = new CountDownLatch(1); // To ensure all threads start simultaneously
    CountDownLatch completionLatch = new CountDownLatch(numberOfThreads);
    
    // Create half threads transferring from user1 to user2
    for (int i = 0; i < numberOfThreads/2; i++) {
        executorService.submit(() -> {
            try {
                startLatch.await(); // Wait for all threads to be ready
                bankService.transferFunds("user1@test.com", "user2@test.com", 10.0);
            } catch (Exception e) {
                System.err.println("Transfer failed: " + e.getMessage());
                e.printStackTrace();
            } finally {
                completionLatch.countDown();
            }
        });
    }
    
    // Create half threads transferring from user2 to user1
    for (int i = 0; i < numberOfThreads/2; i++) {
        executorService.submit(() -> {
            try {
                startLatch.await(); // Wait for all threads to be ready
                bankService.transferFunds("user2@test.com", "user1@test.com", 10.0);
            } catch (Exception e) {
                System.err.println("Transfer failed: " + e.getMessage());
                e.printStackTrace();
            } finally {
                completionLatch.countDown();
            }
        });
    }
    
    startLatch.countDown(); // Start all threads
    boolean completed = completionLatch.await(30, TimeUnit.SECONDS);
    
    if (!completed) {
        System.err.println("Test timed out - possible deadlock detected!");
    }
    
    executorService.shutdown();
}
}
=== File: src/test/resources/application-test.properties ===
# Application
spring.application.name=bank-app

# src/test/resources/application.properties
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.generate_statistics=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG

# Set test JWT secret
jwt.secret=testsecretkeytestsecretkeytestsecretkeytestsecretkey
jwt.expiration.access=3600000
jwt.expiration.refresh=86400
=== File: src/main/java/com/bank/repository/RefreshTokenRepository.java ===
package com.bank.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bank.model.RefreshToken;

@Repository
public interface RefreshTokenRepository extends JpaRepository<RefreshToken, Long> {

    RefreshToken findByToken(String token);

}
    




=== File: src/main/java/com/bank/repository/UserRepository.java ===
package com.bank.repository;


import com.bank.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    User findByEmail(String email);
}

=== File: src/main/java/com/bank/config/SecurityConfig.java ===
package com.bank.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.bank.security.jwt.JwtRequestFilter;

import org.springframework.beans.factory.annotation.Autowired;


@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private JwtRequestFilter jwtRequestFilter;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())  // Disable CSRF for API endpoints
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                // Allow access to static resources
                .requestMatchers("/", "/index.html", "/static/**", "/*.js", "/*.css", "/*.ico", "/images/**").permitAll()
                // Allow access to public API endpoints
                .requestMatchers("/api/users/login", "/api/users/register", "/api/users/refresh").permitAll()
                // Require authentication for all other requests
                .requestMatchers("/api/users/transfer").authenticated()
                .requestMatchers("/api/users/all").authenticated()
                .anyRequest().authenticated())
            .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
        
        return http.build();
    }
}
=== File: src/main/java/com/bank/payload/AuthResponse.java ===
package com.bank.payload;



public class AuthResponse {
    private String accessToken;
    private String refreshToken;
    private String email;
    private double balance;

    public AuthResponse(String accessToken, String refreshToken, String email, double balance) {
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.email = email;
        this.balance = balance;
    }

    // Getters and setters
    public String getAccessToken() { return accessToken; }
    public void setAccessToken(String accessToken) { this.accessToken = accessToken; }
    public String getRefreshToken() { return refreshToken; }
    public void setRefreshToken(String refreshToken) { this.refreshToken = refreshToken; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}
=== File: src/main/java/com/bank/model/User.java ===
package com.bank.model;


import org.springframework.data.annotation.Version;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "bank_user")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Version
    private Long version;

    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 50, message = "Name must be between 2 and 50 characters")
    @Pattern(regexp = "^[a-zA-Z\\s]+$", message = "Name can only contain letters and spaces")
    private String name;

    @NotBlank(message = "Email is required")
    @Email(regexp = "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,63}$", 
           flags = Pattern.Flag.CASE_INSENSITIVE,
           message = "Invalid email format")
    @Size(max = 100, message = "Email must not exceed 100 characters")
    private String email;

    @NotBlank(message = "Phone number is required")
    @Pattern(regexp = "^\\+?[1-9][0-9]{7,14}$", 
            message = "Phone number must be between 8 and 15 digits and may start with +")
    private String phone;

    

    

    private double balance = 100.00;  // Default balance of 100 USD

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}
=== File: src/main/java/com/bank/model/Transaction.java ===
package com.bank.model;

public class Transaction {
    private double amount;

    public Transaction() {}

    public Transaction(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
=== File: src/main/java/com/bank/model/RefreshToken.java ===
package com.bank.model;

import java.time.Instant;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "refresh_token")
public class RefreshToken {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    private User user;

    @Column(nullable = false, unique = true)
    private String token;

    @Column(nullable = false)
    private Instant expiryDate;

    public Long getId() {
        return id;
    }   

    public void setId(Long id) {
        this.id = id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }   

    public Instant getExpiryDate() {
        return expiryDate;
    }   

    public void setExpiryDate(Instant expiryDate) {
        this.expiryDate = expiryDate;
    }
}

=== File: src/main/java/com/bank/security/jwt/JwtRequestFilter.java ===
package com.bank.security.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
import java.util.ArrayList;
import com.bank.service.BankService;
import com.bank.model.User;
import com.bank.security.jwt.JwtService;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {
    @Autowired
    private JwtService jwtService;
    
    @Autowired
    private BankService bankService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {
        
        final String authHeader = request.getHeader("Authorization");
        System.out.println("Auth header: " + authHeader); // Debug log

        String email = null;
        String jwt = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            jwt = authHeader.substring(7);
            try {
                email = jwtService.getEmailFromToken(jwt);
                System.out.println("Extracted email: " + email); // Debug log
            } catch (Exception e) {
                System.out.println("Token validation failed: " + e.getMessage()); // Debug log
                // Token validation failed
            }
        }

        if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            User user = bankService.loginUser(email);
            if (jwtService.validateToken(jwt)) {
                // Set authentication in context
                UsernamePasswordAuthenticationToken authentication = 
                    new UsernamePasswordAuthenticationToken(user, null, new ArrayList<>());
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }
        chain.doFilter(request, response);
    }
}
=== File: src/main/java/com/bank/security/jwt/JwtProperties.java ===
package com.bank.security.jwt;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@ConfigurationProperties(prefix = "jwt")
@Component
public class JwtProperties {
    private String secret;
    private Expiration expiration;

    // Getters and setters
    public String getSecret() {
        return secret;
    }

    public void setSecret(String secret) {
        this.secret = secret;
    }

    public Expiration getExpiration() {
        return expiration;
    }

    public void setExpiration(Expiration expiration) {
        this.expiration = expiration;
    }

    public static class Expiration {
        private long access;
        private long refresh;

        // Getters and setters
        public long getAccess() {
            return access;
        }

        public void setAccess(long access) {
            this.access = access;
        }

        public long getRefresh() {
            return refresh;
        }

        public void setRefresh(long refresh) {
            this.refresh = refresh;
        }
    }
}
=== File: src/main/java/com/bank/security/jwt/JwtService.java ===
package com.bank.security.jwt;


import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;

import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.io.Decoders;
import java.security.Key;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.bank.model.User;

@Service
public class JwtService {

      @Autowired
    private JwtProperties jwtProperties;

    
    
    

    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(jwtProperties.getSecret());
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public String generateAccessToken(User user) {
        return Jwts.builder()
                .setSubject(user.getEmail())
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtProperties.getExpiration().getAccess()))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public String generateRefreshToken(User user) {
        return Jwts.builder()
                .setSubject(user.getEmail())
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtProperties.getExpiration().getRefresh()))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public String getEmailFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token);
            return true;
        } catch (SecurityException | MalformedJwtException | ExpiredJwtException | UnsupportedJwtException | IllegalArgumentException e) {
            return false;
        }
    }
}
=== File: src/main/java/com/bank/security/jwt/util/JwtSecretGenerator.java ===
package com.bank.security.jwt.util;

import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import java.security.Key;

import io.jsonwebtoken.io.Encoders;

public class JwtSecretGenerator {
    public static void main(String[] args) {
        // Generate a secure key for HS256
        Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);
        
        // Convert it to Base64 encoded string
        String secretString = Encoders.BASE64.encode(key.getEncoded());
        
        System.out.println("Generated JWT Secret Key:");
        System.out.println(secretString);
    }
}
=== File: src/main/java/com/bank/controller/UserController.java ===
package com.bank.controller;

import com.bank.model.User;
import com.bank.exception.TokenRefreshException;
import com.bank.model.RefreshToken;
import com.bank.service.BankService;
import com.bank.security.jwt.JwtService;
import com.bank.service.RefreshTokenService;

import jakarta.validation.Valid;

import com.bank.payload.AuthResponse;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserController {
    @Autowired
    private BankService bankService;
    
    @Autowired
    private JwtService jwtService;
    
    @Autowired
    private RefreshTokenService refreshTokenService;

    // Registration endpoint - creates user and returns tokens
    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@Valid @RequestBody User user) {
        User newUser = bankService.registerUser(user.getName(), user.getEmail(), user.getPhone());
        
        String accessToken = jwtService.generateAccessToken(newUser);
        RefreshToken refreshToken = refreshTokenService.createRefreshToken(newUser);
        
        return ResponseEntity.ok(new AuthResponse(
            accessToken,
            refreshToken.getToken(),
            newUser.getEmail(),
            newUser.getBalance()
        ));
    }

    // Login endpoint - validates user and returns tokens
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestParam String email) {
        System.out.println("Login attempt for email: " + email);  // Debug log
        User user = bankService.loginUser(email);
        if (user != null) {
            System.out.println("User found: " + user.getEmail());  // Debug log
            String accessToken = jwtService.generateAccessToken(user);
            RefreshToken refreshToken = refreshTokenService.createRefreshToken(user);
            
            return ResponseEntity.ok(new AuthResponse(
                accessToken,
                refreshToken.getToken(),
                user.getEmail(),
                user.getBalance()
            ));
        }
        System.out.println("User not found for email: " + email);  // Debug log
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    }

    // Token refresh endpoint
    @PostMapping("/refresh")
public ResponseEntity<?> refreshToken(@RequestParam String refreshToken) {
    try {
        // Find refresh token in repository
        RefreshToken token = refreshTokenService.findByToken(refreshToken);
        if (token == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body("Invalid refresh token");
        }

        // Verify the token hasn't expired
        try {
            token = refreshTokenService.verifyExpiration(token);
        } catch (TokenRefreshException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body("Refresh token expired. Please login again");
        }

        // Get user and generate new access token
        User user = token.getUser();
        String newAccessToken = jwtService.generateAccessToken(user);
        
        // Return new tokens and user info
        return ResponseEntity.ok(new AuthResponse(
            newAccessToken,
            refreshToken,  // Return same refresh token as it's still valid
            user.getEmail(),
            user.getBalance()
        ));

    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
            .body("Error while refreshing token: " + e.getMessage());
    }
}

    @GetMapping("/all")
    public ResponseEntity<?> getAllUsers() {
        try {
            List<User> users = bankService.getAllUsers();
            return ResponseEntity.ok(users);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Error fetching users: " + e.getMessage());
        }
    }
}
=== File: src/main/java/com/bank/service/RefreshTokenService.java ===
package com.bank.service;

import java.time.Instant;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.bank.exception.TokenRefreshException;
import com.bank.model.RefreshToken;
import com.bank.model.User;
import com.bank.repository.RefreshTokenRepository;
import com.bank.repository.UserRepository;

@Service
public class RefreshTokenService {
    @Autowired
    private RefreshTokenRepository refreshTokenRepository;
    
    @Autowired
    private UserRepository userRepository;

    @Value("${jwt.expiration.refresh}")
    private Long refreshTokenDurationMs;

    public RefreshToken createRefreshToken(User user) {
        RefreshToken refreshToken = new RefreshToken();
        refreshToken.setUser(user);
        refreshToken.setExpiryDate(Instant.now().plusMillis(refreshTokenDurationMs));
        refreshToken.setToken(UUID.randomUUID().toString());
        return refreshTokenRepository.save(refreshToken);
    }

    public RefreshToken verifyExpiration(RefreshToken token) throws TokenRefreshException {
        if (token.getExpiryDate().compareTo(Instant.now()) < 0) {
            // Token has expired - clean up and throw exception
            refreshTokenRepository.delete(token);
            throw new TokenRefreshException(token.getToken(), 
                "Refresh token expired. Please make a new login request");
        }
        
        return token;
    }

    public RefreshToken findByToken(String refreshToken) {
      return  refreshTokenRepository.findByToken(refreshToken);
       
    }
}
=== File: src/main/java/com/bank/service/BankService.java ===
package com.bank.service;

import com.bank.exception.ValidationException;
import com.bank.model.User;
import com.bank.repository.UserRepository;

import org.hibernate.StaleObjectStateException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import jakarta.persistence.EntityManager;
import jakarta.persistence.LockModeType;
import jakarta.persistence.OptimisticLockException;
import jakarta.persistence.PessimisticLockException;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ObjectOptimisticLockingFailureException;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;

@Service
public class BankService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EntityManager entityManager;
    @Transactional
    public User registerUser(String name, String email, String phone) {
        
          List<String> errors = new ArrayList<>();

         // Check if email already exists
         if (userRepository.findByEmail(email) != null) {
            errors.add("Email already registered");
        }

         // If there are any errors, throw validation exception
         if (!errors.isEmpty()) {
            throw new ValidationException(errors);
        }

        User user = new User();
        user.setName(name.trim());
        user.setEmail(email.trim().toLowerCase());
        user.setPhone(phone.trim());
        return userRepository.save(user);
    }
    @Transactional(readOnly = true)
    public User loginUser(String email) {
        return userRepository.findByEmail(email);
    }

    @Transactional(isolation = Isolation.SERIALIZABLE, timeout = 10)
public double transferFunds(String fromEmail, String toEmail, double amount) {
    System.out.println("Starting transfer from " + fromEmail + " to " + toEmail);
    try {
        // First, get both users without locks to get their IDs
        User fromUser = userRepository.findByEmail(fromEmail);
        User toUser = userRepository.findByEmail(toEmail);
        System.out.println("Attempting to lock users - From ID: " + fromUser.getId() + ", To ID: " + toUser.getId());
        if (fromUser == null || toUser == null) {
            throw new IllegalArgumentException("One or both users not found");
        }

        // Lock users based on ID order to prevent deadlocks
        User firstLockUser;
        User secondLockUser;
        boolean isFromFirst = fromUser.getId() < toUser.getId();
        
        if (isFromFirst) {
            firstLockUser = entityManager.createQuery(
                    "SELECT u FROM User u WHERE u.id = :id", User.class)
                    .setParameter("id", fromUser.getId())
                    .setLockMode(LockModeType.PESSIMISTIC_WRITE)
                    .getSingleResult();

            secondLockUser = entityManager.createQuery(
                    "SELECT u FROM User u WHERE u.id = :id", User.class)
                    .setParameter("id", toUser.getId())
                    .setLockMode(LockModeType.PESSIMISTIC_WRITE)
                    .getSingleResult();
        } else {
            firstLockUser = entityManager.createQuery(
                    "SELECT u FROM User u WHERE u.id = :id", User.class)
                    .setParameter("id", toUser.getId())
                    .setLockMode(LockModeType.PESSIMISTIC_WRITE)
                    .getSingleResult();

            secondLockUser = entityManager.createQuery(
                    "SELECT u FROM User u WHERE u.id = :id", User.class)
                    .setParameter("id", fromUser.getId())
                    .setLockMode(LockModeType.PESSIMISTIC_WRITE)
                    .getSingleResult();
        }

        System.out.println("Locks acquired for transfer from " + fromEmail + " to " + toEmail);

        // Map back to from/to users
        fromUser = isFromFirst ? firstLockUser : secondLockUser;
        toUser = isFromFirst ? secondLockUser : firstLockUser;

        // Validate transaction
        if (fromUser.getBalance() < amount) {
            throw new IllegalArgumentException("Insufficient funds");
        }

        // Perform transfer
        fromUser.setBalance(fromUser.getBalance() - amount);
        toUser.setBalance(toUser.getBalance() + amount);

        // Save changes
        entityManager.merge(fromUser);
        entityManager.merge(toUser);
        entityManager.flush();

        return fromUser.getBalance();

    } catch (PessimisticLockException e) {
        System.err.println("PassimisticLock exception Error in transfer from " + fromEmail + " to " + toEmail + ": " + e.getMessage());
        throw new RuntimeException("Transaction could not be completed due to concurrent access. Please try again.", e);
    } catch (DataAccessException e) {
        System.err.println("Data Access exception Error in transfer from " + fromEmail + " to " + toEmail + ": " + e.getMessage());
        throw new RuntimeException("Database error occurred during transfer", e);
    }
}    @Transactional(readOnly = true)
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    
}

=== File: src/main/java/com/bank/exception/GlobalExceptionHandler.java ===
package com.bank.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return ResponseEntity.badRequest().body(errors);
    }

    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<Map<String, List<String>>> handleCustomValidationExceptions(
            ValidationException ex) {
        Map<String, List<String>> errors = new HashMap<>();
        errors.put("errors", ex.getErrors());
        return ResponseEntity.badRequest().body(errors);
    }
}
=== File: src/main/java/com/bank/exception/ValidationException.java ===
package com.bank.exception;
import java.util.List;

public class ValidationException extends RuntimeException {
    private List<String> errors;

    public ValidationException(List<String> errors) {
        this.errors = errors;
    }

    public List<String> getErrors() {
        return errors;
    }
}
=== File: src/main/java/com/bank/exception/TokenRefreshException.java ===
package com.bank.exception;

public class TokenRefreshException extends Throwable {

    public TokenRefreshException(String token, String string) {
        super(string + " " + token);        
    }

}

=== File: src/main/java/com/bank/BankApplication.java ===
package com.bank;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableJpaRepositories(basePackages = "com.bank.repository")
@EntityScan(basePackages = "com.bank.model")
@EnableConfigurationProperties
@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}
=== File: src/main/resources/static/index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Bank</title>
    <style>
        .error { color: red; display: none; }
        .success { color: green; display: none; }
        .form-group { margin-bottom: 10px; }
        .account-section { display: none; }
        .welcome-message { font-weight: bold; margin-bottom: 10px; }
    </style>
</head>
<body>
    <h2>Simple Bank</h2>
    
    <!-- Login/Register Section -->
    <div id="authSection">
        <!-- Registration Form -->
        <h3>Register</h3>
        <div class="form-group">
            <input type="text" id="name" placeholder="Name" pattern="[A-Za-z\s]+" maxlength="50" required />
            <div id="nameError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="email" id="email" placeholder="Email" maxlength="100" required />
            <div id="emailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="tel" id="phone" placeholder="Phone (e.g., +1234567890)" 
                   pattern="\+?[1-9][0-9]{7,14}" required />
            <div id="phoneError" class="error"></div>
        </div>
        <button onclick="register()">Register</button>
        <div id="registerSuccess" class="success">Registration successful!</div>

        <!-- Login Form -->
        <h3>Login</h3>
        <div class="form-group">
            <input type="email" id="loginEmail" placeholder="Email" required />
            <div id="loginError" class="error"></div>
        </div>
        <button onclick="login()">Login</button>
    </div>

    <!-- Account Section (visible after login) -->
    <div id="accountSection" class="account-section">
        <div class="welcome-message">Welcome, <span id="userName"></span>!</div>
        <button onclick="logout()" style="float: right;">Logout</button>
        
        <h3>Account Details</h3>
        <p><strong>Balance:</strong> $<span id="balance">0.00</span></p>
        
        <!-- Transfer Funds -->
        <h3>Transfer Money</h3>
        <div class="form-group">
            <select id="toEmail" required>
                <option value="">Select recipient</option>
            </select>
            <div id="transferEmailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="number" id="amount" placeholder="Amount" min="0.01" step="0.01" required />
            <div id="transferAmountError" class="error"></div>
        </div>
        <button onclick="transfer()">Transfer</button>
        <div id="transferSuccess" class="success">Transfer successful!</div>
        <div id="transferError" class="error"></div>
    </div>

    <script>
        let accessToken = null;
        let refreshToken = null;

        let loggedInUser;
        let allUsers = [];

        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

        // Update the showError and showSuccess functions:
function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        console.log('Showing error:', elementId, message);  // Debug log
    } else {
        console.error('Error element not found:', elementId);  // Debug log
    }
}

function showSuccess(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'block';
        console.log('Showing success:', elementId);  // Debug log
        setTimeout(() => {
            element.style.display = 'none';
        }, 3000);
    } else {
        console.error('Success element not found:', elementId);  // Debug log
    }
}
        function clearInputs(inputs) {
            inputs.forEach(id => {
                document.getElementById(id).value = '';
            });
        }

        function validateEmail(email) {
            const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/;
            return re.test(email);
        }

        function validatePhone(phone) {
            const re = /^\+?[1-9][0-9]{7,14}$/;
            return re.test(phone);
        }

        function validateName(name) {
            const re = /^[a-zA-Z\s]{2,50}$/;
            return re.test(name);
        }

    async function register() {
    clearErrors();
    
    const name = document.getElementById('name').value.trim();
    const email = document.getElementById('email').value.trim();
    const phone = document.getElementById('phone').value.trim();
    
    console.log('Attempting registration with:', { name, email, phone });  // Debug log
    // Validate inputs
    let hasError = false;
    
    if (!validateName(name)) {
        showError('nameError', 'Name must be 2-50 characters and contain only letters and spaces');
        hasError = true;
    }
    
    if (!validateEmail(email)) {
        showError('emailError', 'Invalid email format');
        hasError = true;
    }
    
    if (!validatePhone(phone)) {
        showError('phoneError', 'Phone must be 8-15 digits and may start with +');
        hasError = true;
    }
    if (hasError) return;

    try {
        const response = await fetch('/api/users/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, email, phone })
        });

        if (!response.ok) {
            const errorData = await response.json();
            Object.keys(errorData).forEach(key => {
                showError(`${key}Error`, errorData[key]);
            });
            return;
        }

        const data = await response.json();
        // Store tokens
        accessToken = data.accessToken;
        refreshToken = data.refreshToken;
        loggedInUser = {
            email: data.email,
            name: name,
            balance: data.balance
        };
        
        showSuccess('registerSuccess');
        clearInputs(['name', 'email', 'phone']);
        showAccountSection(true);
    } catch (error) {
        showError('nameError', 'Registration failed. Please try again.');
    }
}

async function login() {
    clearErrors();
    const email = document.getElementById('loginEmail').value.trim();
    
    if (!validateEmail(email)) {
        showError('loginError', 'Invalid email format');
        return;
    }

    try {
        const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
            method: 'POST'
        });

        if (!response.ok) {
            showError('loginError', 'Login failed. Please check your email.');
            return;
        }

        const data = await response.json();
        accessToken = data.accessToken;
        refreshToken = data.refreshToken;
        loggedInUser = {
            email: data.email,
            balance: data.balance
        };
        
        clearInputs(['loginEmail']);
        showAccountSection(true);
    } catch (error) {
        showError('loginError', 'Login failed. Please try again.');
    }
} 

async function refreshAccessToken() {
    try {
        const response = await fetch('/api/users/refresh', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ refreshToken })
        });

        if (!response.ok) {
            // If refresh fails, log out the user
            logout();
            return false;
        }

        const data = await response.json();
        accessToken = data.accessToken;
        return true;
    } catch (error) {
        logout();
        return false;
    }
}

async function getAllUsers() {
    try {
        console.log('Fetching all users with token:', accessToken);  // Debug log
        const response = await fetch('/api/users/all', {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        
        console.log('getAllUsers response status:', response.status);  // Debug log
        
        if (response.status === 401) {
            console.log('Token expired, attempting refresh...');  // Debug log
            if (await refreshAccessToken()) {
                return getAllUsers(); // Retry with new token
            }
            return;
        }
        
        if (response.ok) {
            allUsers = await response.json();
            console.log('Retrieved users:', allUsers);  // Debug log
            updateRecipientsList();
        } else {
            console.error('Failed to fetch users:', response.status);
        }
    } catch (error) {
        console.error('Failed to fetch users:', error);
    }
}


        function updateRecipientsList() {
            const select = document.getElementById('toEmail');
            select.innerHTML = '<option value="">Select recipient</option>';
            
            allUsers.forEach(user => {
                if (loggedInUser && user.email !== loggedInUser.email) {
                    const option = document.createElement('option');
                    option.value = user.email;
                    option.textContent = `${user.name} (${user.email})`;
                    select.appendChild(option);
                }
            });
        }

        function showAccountSection(show) {
    console.log('Showing account section:', show, 'User:', loggedInUser);  // Debug log
    document.getElementById('authSection').style.display = show ? 'none' : 'block';
    document.getElementById('accountSection').style.display = show ? 'block' : 'none';
    if (show) {
        document.getElementById('userName').textContent = loggedInUser.name;
        updateBalance();
        getAllUsers(); // Fetch users for the dropdown
    }
}


        function logout() {
    accessToken = null;
    refreshToken = null;
    loggedInUser = null;
    showAccountSection(false);
    clearInputs(['loginEmail']);
}

      
        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

       

        async function login() {
            clearErrors();
            const email = document.getElementById('loginEmail').value.trim();
            
            if (!validateEmail(email)) {
                showError('loginError', 'Invalid email format');
                return;
            }

            try {
                const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('loginError', 'Login failed. Please check your email.');
                    return;
                }

                loggedInUser = await response.json();
                clearInputs(['loginEmail']);
                showAccountSection(true);
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

    async function transfer() {
        clearErrors();
        const toEmail = document.getElementById('toEmail').value;
        const amount = document.getElementById('amount').value;
        
        console.log('Transfer attempt:', { toEmail, amount, token: accessToken }); // Debug log

        if (!toEmail || amount <= 0) {

            showError('transferEmailError', 'Please select a recipient');
            // Validation remains the same...
            return;
        }

        if (amount <= 0) {
            showError('transferAmountError', 'Amount must be greater than 0');
            return;
        }

        try {
            const response = await fetch(`/api/users/transfer?fromEmail=${encodeURIComponent(loggedInUser.email)}&toEmail=${encodeURIComponent(toEmail)}&amount=${amount}`, {
                method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
            });

            console.log('Transfer response:', response.status); // Debug log

            if (response.status === 401 || response.status === 403) {
            // Token might be expired, try to refresh
            console.log('Attempting token refresh...'); // Debug log
            if (await refreshAccessToken()) {
                return transfer(); // Retry with new token
            }
            showError('transferError', 'Authentication failed. Please login again.');
            return;
        }

            if (!response.ok) {
                const errorData = await response.text();
            console.error('Transfer failed:', errorData); // Debug log
            showError('transferError', `Transfer failed: ${errorData}`);
                return;
            }

            const newBalance = await response.json();
            loggedInUser.balance = newBalance;
            updateBalance();
            showSuccess('transferSuccess');
            clearInputs(['amount']);
            document.getElementById('toEmail').value = '';
        } catch (error) {
            showError('transferError', 'Transfer failed. Please try again.');
        }
        }
        
        function updateBalance() {
            if (loggedInUser) {
                document.getElementById('balance').innerText = loggedInUser.balance.toFixed(2);
            }
        }
    </script>
</body>
</html>
=== File: src/main/resources/application.properties ===
spring.application.name=bank-app

# Database connection details
spring.datasource.url=jdbc:mysql://localhost:3306/bankdb
spring.datasource.username=bankuser
spring.datasource.password=password123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#JWT details
jwt.secret=ODseuvVDYRWAm0fnXTsbaN3FNakYiQNwNtlBFF8s7Ew=
jwt.expiration.access=3600000
jwt.expiration.refresh=86400000

=== File: HELP.md ===
# Read Me First
The following was discovered as part of building this project:

* The original package name 'com.bank-app.bank-app' is invalid and this project uses 'com.bank_app.bank_app' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.2/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.2/maven-plugin/build-image.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.4.2/reference/web/servlet.html)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.4.2/reference/using/devtools.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


=== File: target/surefire-reports/TEST-com.bank.service.BankServiceConcurrencyTest.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.bank.service.BankServiceConcurrencyTest" time="9.055" tests="1" errors="0" skipped="0" failures="1">
  <properties>
    <property name="java.specification.version" value="23"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/yair/git2/prjects/bank-app/target/test-classes:/home/yair/git2/prjects/bank-app/target/classes:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.2/spring-boot-starter-web-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.2/spring-boot-starter-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.2/spring-boot-starter-logging-3.4.2.jar:/home/yair/.m2/repository/ch/qos/logback/logback-classic/1.5.16/logback-classic-1.5.16.jar:/home/yair/.m2/repository/ch/qos/logback/logback-core/1.5.16/logback-core-1.5.16.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/yair/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/yair/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/yair/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.2/spring-boot-starter-json-3.4.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.2/spring-boot-starter-tomcat-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/yair/.m2/repository/org/springframework/spring-web/6.2.2/spring-web-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-beans/6.2.2/spring-beans-6.2.2.jar:/home/yair/.m2/repository/io/micrometer/micrometer-observation/1.14.3/micrometer-observation-1.14.3.jar:/home/yair/.m2/repository/io/micrometer/micrometer-commons/1.14.3/micrometer-commons-1.14.3.jar:/home/yair/.m2/repository/org/springframework/spring-webmvc/6.2.2/spring-webmvc-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-context/6.2.2/spring-context-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-expression/6.2.2/spring-expression-6.2.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.2/spring-boot-starter-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.2/spring-boot-starter-jdbc-3.4.2.jar:/home/yair/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/yair/.m2/repository/org/springframework/spring-jdbc/6.2.2/spring-jdbc-6.2.2.jar:/home/yair/.m2/repository/org/hibernate/orm/hibernate-core/6.6.5.Final/hibernate-core-6.6.5.Final.jar:/home/yair/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/yair/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/yair/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/yair/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/yair/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/yair/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/yair/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/yair/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/yair/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/yair/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/yair/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-jpa/3.4.2/spring-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-commons/3.4.2/spring-data-commons-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-orm/6.2.2/spring-orm-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-tx/6.2.2/spring-tx-6.2.2.jar:/home/yair/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/yair/.m2/repository/org/springframework/spring-aspects/6.2.2/spring-aspects-6.2.2.jar:/home/yair/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/yair/.m2/repository/mysql/mysql-connector-java/8.0.28/mysql-connector-java-8.0.28.jar:/home/yair/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.2/spring-boot-devtools-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot/3.4.2/spring-boot-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.2/spring-boot-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.2/spring-boot-starter-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test/3.4.2/spring-boot-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.2/spring-boot-test-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/yair/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/yair/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/yair/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/yair/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/yair/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/yair/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/yair/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/yair/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/yair/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/yair/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/yair/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/yair/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/yair/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/yair/.m2/repository/org/springframework/spring-core/6.2.2/spring-core-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-jcl/6.2.2/spring-jcl-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-test/6.2.2/spring-test-6.2.2.jar:/home/yair/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.2/spring-boot-starter-validation-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/yair/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/yair/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/yair/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/yair/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/yair/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.4.2/spring-boot-starter-security-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-aop/6.2.2/spring-aop-6.2.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-config/6.4.2/spring-security-config-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-core/6.4.2/spring-security-core-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-crypto/6.4.2/spring-security-crypto-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-web/6.4.2/spring-security-web-6.4.2.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Jerusalem"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="23"/>
    <property name="APPLICATION_NAME" value="bank-app"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/jdk-23.0.1-oracle-x64/lib"/>
    <property name="sun.java.command" value="/home/yair/git2/prjects/bank-app/target/surefire/surefirebooter-20250218152610009_3.jar /home/yair/git2/prjects/bank-app/target/surefire 2025-02-18T15-26-09_896-jvmRun1 surefire-20250218152610009_1tmp surefire_0-20250218152610009_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/yair/git2/prjects/bank-app/target/test-classes:/home/yair/git2/prjects/bank-app/target/classes:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.2/spring-boot-starter-web-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.2/spring-boot-starter-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.2/spring-boot-starter-logging-3.4.2.jar:/home/yair/.m2/repository/ch/qos/logback/logback-classic/1.5.16/logback-classic-1.5.16.jar:/home/yair/.m2/repository/ch/qos/logback/logback-core/1.5.16/logback-core-1.5.16.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/yair/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/yair/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/yair/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.2/spring-boot-starter-json-3.4.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.2/spring-boot-starter-tomcat-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/yair/.m2/repository/org/springframework/spring-web/6.2.2/spring-web-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-beans/6.2.2/spring-beans-6.2.2.jar:/home/yair/.m2/repository/io/micrometer/micrometer-observation/1.14.3/micrometer-observation-1.14.3.jar:/home/yair/.m2/repository/io/micrometer/micrometer-commons/1.14.3/micrometer-commons-1.14.3.jar:/home/yair/.m2/repository/org/springframework/spring-webmvc/6.2.2/spring-webmvc-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-context/6.2.2/spring-context-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-expression/6.2.2/spring-expression-6.2.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.2/spring-boot-starter-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.2/spring-boot-starter-jdbc-3.4.2.jar:/home/yair/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/yair/.m2/repository/org/springframework/spring-jdbc/6.2.2/spring-jdbc-6.2.2.jar:/home/yair/.m2/repository/org/hibernate/orm/hibernate-core/6.6.5.Final/hibernate-core-6.6.5.Final.jar:/home/yair/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/yair/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/yair/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/yair/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/yair/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/yair/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/yair/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/yair/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/yair/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/yair/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/yair/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-jpa/3.4.2/spring-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-commons/3.4.2/spring-data-commons-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-orm/6.2.2/spring-orm-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-tx/6.2.2/spring-tx-6.2.2.jar:/home/yair/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/yair/.m2/repository/org/springframework/spring-aspects/6.2.2/spring-aspects-6.2.2.jar:/home/yair/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/yair/.m2/repository/mysql/mysql-connector-java/8.0.28/mysql-connector-java-8.0.28.jar:/home/yair/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.2/spring-boot-devtools-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot/3.4.2/spring-boot-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.2/spring-boot-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.2/spring-boot-starter-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test/3.4.2/spring-boot-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.2/spring-boot-test-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/yair/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/yair/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/yair/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/yair/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/yair/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/yair/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/yair/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/yair/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/yair/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/yair/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/yair/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/yair/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/yair/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/yair/.m2/repository/org/springframework/spring-core/6.2.2/spring-core-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-jcl/6.2.2/spring-jcl-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-test/6.2.2/spring-test-6.2.2.jar:/home/yair/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.2/spring-boot-starter-validation-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/yair/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/yair/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/yair/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/yair/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/yair/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.4.2/spring-boot-starter-security-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-aop/6.2.2/spring-aop-6.2.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-config/6.4.2/spring-security-config-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-core/6.4.2/spring-security-core-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-crypto/6.4.2/spring-security-crypto-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-web/6.4.2/spring-security-web-6.4.2.jar:"/>
    <property name="test" value="BankServiceConcurrencyTest#testConcurrentTransfersSameAmount"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/yair"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-10-15"/>
    <property name="java.home" value="/usr/lib/jvm/jdk-23.0.1-oracle-x64"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/yair/git2/prjects/bank-app"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/home/yair/git2/prjects/bank-app/target/surefire/surefirebooter-20250218152610009_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="23.0.1+11-39"/>
    <property name="user.name" value="yair"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.8.0-52-generic"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="/home/yair/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="23.0.1"/>
    <property name="user.dir" value="/home/yair/git2/prjects/bank-app"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="3065884"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="23.0.1+11-39"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="67.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[bank-app] "/>
  </properties>
  <testcase name="testConcurrentTransfersSameAmount" classname="com.bank.service.BankServiceConcurrencyTest" time="1.972">
    <failure message="User1 balance mismatch. Expected: 100.00, Actual: 50.00 ==&gt; expected: &lt;100.0&gt; but was: &lt;50.0&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: User1 balance mismatch. Expected: 100.00, Actual: 50.00 ==> expected: <100.0> but was: <50.0>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:86)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1024)
	at com.bank.service.BankServiceConcurrencyTest.testConcurrentTransfersSameAmount(BankServiceConcurrencyTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
]]></failure>
    <system-out><![CDATA[15:26:11.012 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.bank.service.BankServiceConcurrencyTest]: BankServiceConcurrencyTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
15:26:11.217 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.bank.BankApplication for test class com.bank.service.BankServiceConcurrencyTest
15:26:11.445 [main] INFO org.springframework.boot.devtools.restart.RestartApplicationListener -- Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.2)

2025-02-18T15:26:11.906+02:00  INFO 3065884 --- [bank-app] [           main] c.b.service.BankServiceConcurrencyTest   : Starting BankServiceConcurrencyTest using Java 23.0.1 with PID 3065884 (started by yair in /home/yair/git2/prjects/bank-app)
2025-02-18T15:26:11.909+02:00  INFO 3065884 --- [bank-app] [           main] c.b.service.BankServiceConcurrencyTest   : The following 1 profile is active: "test"
2025-02-18T15:26:12.924+02:00  INFO 3065884 --- [bank-app] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-18T15:26:13.005+02:00  INFO 3065884 --- [bank-app] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 66 ms. Found 2 JPA repository interfaces.
2025-02-18T15:26:14.010+02:00  INFO 3065884 --- [bank-app] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-18T15:26:14.098+02:00  INFO 3065884 --- [bank-app] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-18T15:26:14.201+02:00  INFO 3065884 --- [bank-app] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-02-18T15:26:14.672+02:00  INFO 3065884 --- [bank-app] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-18T15:26:14.719+02:00  INFO 3065884 --- [bank-app] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-02-18T15:26:14.998+02:00  INFO 3065884 --- [bank-app] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-02-18T15:26:15.002+02:00  INFO 3065884 --- [bank-app] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-02-18T15:26:15.039+02:00  WARN 3065884 --- [bank-app] [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-18T15:26:15.076+02:00  INFO 3065884 --- [bank-app] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-18T15:26:16.175+02:00  INFO 3065884 --- [bank-app] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-18T15:26:16.194+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : drop table if exists bank_user cascade 
Hibernate: drop table if exists bank_user cascade 
2025-02-18T15:26:16.198+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : drop table if exists refresh_token cascade 
Hibernate: drop table if exists refresh_token cascade 
2025-02-18T15:26:16.217+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : create table bank_user (balance float(53) not null, id bigint generated by default as identity, version bigint, name varchar(50) not null, email varchar(100) not null, phone varchar(255) not null, primary key (id))
Hibernate: create table bank_user (balance float(53) not null, id bigint generated by default as identity, version bigint, name varchar(50) not null, email varchar(100) not null, phone varchar(255) not null, primary key (id))
2025-02-18T15:26:16.232+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : create table refresh_token (expiry_date timestamp(6) with time zone not null, id bigint generated by default as identity, user_id bigint unique, token varchar(255) not null unique, primary key (id))
Hibernate: create table refresh_token (expiry_date timestamp(6) with time zone not null, id bigint generated by default as identity, user_id bigint unique, token varchar(255) not null unique, primary key (id))
2025-02-18T15:26:16.245+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : alter table if exists refresh_token add constraint FK6kh9ughd5k9iinav6pgtinn8u foreign key (user_id) references bank_user
Hibernate: alter table if exists refresh_token add constraint FK6kh9ughd5k9iinav6pgtinn8u foreign key (user_id) references bank_user
2025-02-18T15:26:16.263+02:00  INFO 3065884 --- [bank-app] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-18T15:26:16.444+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.445+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.509+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.579+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.587+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.719+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.731+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.736+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.737+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:16.828+02:00  WARN 3065884 --- [bank-app] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-18T15:26:16.856+02:00  WARN 3065884 --- [bank-app] [           main] .s.s.UserDetailsServiceAutoConfiguration : 

Using generated security password: 95cc55a8-a2af-4de5-9d82-1ec36065baf4

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-02-18T15:26:16.882+02:00  INFO 3065884 --- [bank-app] [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-02-18T15:26:16.999+02:00  INFO 3065884 --- [bank-app] [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page: class path resource [static/index.html]
2025-02-18T15:26:17.841+02:00  INFO 3065884 --- [bank-app] [           main] c.b.service.BankServiceConcurrencyTest   : Started BankServiceConcurrencyTest in 6.412 seconds (process running for 7.723)
2025-02-18T15:26:18.647+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:18.648+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:18.770+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : select rt1_0.id,rt1_0.expiry_date,rt1_0.token,rt1_0.user_id from refresh_token rt1_0
Hibernate: select rt1_0.id,rt1_0.expiry_date,rt1_0.token,rt1_0.user_id from refresh_token rt1_0
2025-02-18T15:26:18.832+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : committing
2025-02-18T15:26:18.835+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    37485 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    4988830 nanoseconds spent preparing 1 JDBC statements;
    7329968 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    34477 nanoseconds spent executing 1 pre-partial-flushes;
    17800 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:18.836+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:18.836+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:18.838+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0
2025-02-18T15:26:18.839+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : committing
2025-02-18T15:26:18.840+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    21173 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    292820 nanoseconds spent preparing 1 JDBC statements;
    174424 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    6695 nanoseconds spent executing 1 pre-partial-flushes;
    8886 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:18.841+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:18.841+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:18.865+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:18.981+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : insert into bank_user (balance,email,name,phone,version,id) values (?,?,?,?,?,default)
Hibernate: insert into bank_user (balance,email,name,phone,version,id) values (?,?,?,?,?,default)
2025-02-18T15:26:19.001+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : committing
2025-02-18T15:26:19.010+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    19582 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    1470316 nanoseconds spent preparing 2 JDBC statements;
    3553730 nanoseconds spent executing 2 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    7509274 nanoseconds spent executing 1 flushes (flushing a total of 1 entities and 0 collections);
    20508 nanoseconds spent executing 1 pre-partial-flushes;
    6229 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:19.011+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.011+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.014+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.016+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : insert into bank_user (balance,email,name,phone,version,id) values (?,?,?,?,?,default)
Hibernate: insert into bank_user (balance,email,name,phone,version,id) values (?,?,?,?,?,default)
2025-02-18T15:26:19.018+02:00 DEBUG 3065884 --- [bank-app] [           main] o.h.e.t.internal.TransactionImpl         : committing
2025-02-18T15:26:19.019+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    17964 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    178409 nanoseconds spent preparing 2 JDBC statements;
    784295 nanoseconds spent executing 2 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    227597 nanoseconds spent executing 1 flushes (flushing a total of 1 entities and 0 collections);
    13538 nanoseconds spent executing 1 pre-partial-flushes;
    5598 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:19.027+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-5] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-3] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-4] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-7] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [ool-3-thread-10] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-2] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-8] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.028+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-6] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.029+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-9] o.h.e.t.internal.TransactionImpl         : On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [ool-3-thread-10] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-7] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-3] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-9] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-5] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-8] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-2] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-4] o.h.e.t.internal.TransactionImpl         : begin
2025-02-18T15:26:19.030+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-6] o.h.e.t.internal.TransactionImpl         : begin
Starting transfer from test2@test.com to test1@test.com
Starting transfer from test2@test.com to test1@test.com
Starting transfer from test2@test.com to test1@test.com
Starting transfer from test1@test.com to test2@test.com
Starting transfer from test1@test.com to test2@test.com
Starting transfer from test1@test.com to test2@test.com
Starting transfer from test1@test.com to test2@test.com
Starting transfer from test2@test.com to test1@test.com
Starting transfer from test2@test.com to test1@test.com
Starting transfer from test1@test.com to test2@test.com
2025-02-18T15:26:19.037+02:00 DEBUG 3065884 --- [bank-app] [ool-3-thread-10] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.037+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.037+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-8] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.037+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-3] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.038+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-9] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.039+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-7] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.040+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-4] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.040+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-2] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.040+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-6] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.044+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-5] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.050+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-2] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.051+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-6] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.050+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-9] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.051+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-3] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Attempting to lock users - From ID: 2, To ID: 1
Attempting to lock users - From ID: 1, To ID: 2
Attempting to lock users - From ID: 2, To ID: 1
2025-02-18T15:26:19.051+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-5] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.053+02:00 DEBUG 3065884 --- [bank-app] [ool-3-thread-10] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.051+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-7] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Attempting to lock users - From ID: 1, To ID: 2
2025-02-18T15:26:19.055+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-8] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Attempting to lock users - From ID: 1, To ID: 2
Attempting to lock users - From ID: 2, To ID: 1
Attempting to lock users - From ID: 2, To ID: 1
2025-02-18T15:26:19.057+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Attempting to lock users - From ID: 1, To ID: 2
Attempting to lock users - From ID: 1, To ID: 2
2025-02-18T15:26:19.059+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-4] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Attempting to lock users - From ID: 2, To ID: 1
2025-02-18T15:26:19.668+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-7] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.668+02:00 DEBUG 3065884 --- [bank-app] [ool-3-thread-10] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.668+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-2] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.669+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-9] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.669+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-8] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.668+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-3] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.668+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-5] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.669+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.669+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-4] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.669+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-6] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
2025-02-18T15:26:19.674+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update
Locks acquired for transfer from test1@test.com to test2@test.com
2025-02-18T15:26:19.692+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] org.hibernate.SQL                        : update bank_user set balance=?,email=?,name=?,phone=?,version=? where id=?
Hibernate: update bank_user set balance=?,email=?,name=?,phone=?,version=? where id=?
2025-02-18T15:26:19.700+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] org.hibernate.SQL                        : update bank_user set balance=?,email=?,name=?,phone=?,version=? where id=?
Hibernate: update bank_user set balance=?,email=?,name=?,phone=?,version=? where id=?
2025-02-18T15:26:19.703+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-1] o.h.e.t.internal.TransactionImpl         : committing
2025-02-18T15:26:19.704+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-1] i.StatisticalLoggingSessionEventListener : Session Metrics {
    52844 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    12287665 nanoseconds spent preparing 6 JDBC statements;
    3442635 nanoseconds spent executing 6 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    20449777 nanoseconds spent executing 2 flushes (flushing a total of 4 entities and 0 collections);
    283142 nanoseconds spent executing 4 pre-partial-flushes;
    524105 nanoseconds spent executing 4 partial-flushes (flushing a total of 5 entities and 5 collections)
}
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-4] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-6] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-7] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-9] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-8] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.709+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-9] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [ool-3-thread-10] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.710+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-3] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.710+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-3] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.710+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.709+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-4] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.709+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-6] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.709+02:00  WARN 3065884 --- [bank-app] [pool-3-thread-5] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 40001, SQLState: 40001
2025-02-18T15:26:19.710+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-5] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.709+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-7] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.709+02:00 ERROR 3065884 --- [bank-app] [pool-3-thread-8] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.710+02:00 ERROR 3065884 --- [bank-app] [ool-3-thread-10] o.h.engine.jdbc.spi.SqlExceptionHelper   : Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]
2025-02-18T15:26:19.716+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-3] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.718+02:00 DEBUG 3065884 --- [bank-app] [ool-3-thread-10] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.718+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-5] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.718+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-7] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.718+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-8] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.719+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-3] i.StatisticalLoggingSessionEventListener : Session Metrics {
    42295 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    8640856 nanoseconds spent preparing 3 JDBC statements;
    36428518 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    108807 nanoseconds spent executing 3 pre-partial-flushes;
    327684 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.720+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-9] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.718+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-6] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.719+02:00  INFO 3065884 --- [bank-app] [ool-3-thread-10] i.StatisticalLoggingSessionEventListener : Session Metrics {
    25410 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    12332357 nanoseconds spent preparing 3 JDBC statements;
    32811517 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    181847 nanoseconds spent executing 3 pre-partial-flushes;
    576457 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.721+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-4] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.721+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-6] i.StatisticalLoggingSessionEventListener : Session Metrics {
    27611 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    5879233 nanoseconds spent preparing 3 JDBC statements;
    33580407 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    130371 nanoseconds spent executing 3 pre-partial-flushes;
    230837 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.718+02:00 DEBUG 3065884 --- [bank-app] [pool-3-thread-2] o.h.e.t.internal.TransactionImpl         : rolling back
2025-02-18T15:26:19.721+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-4] i.StatisticalLoggingSessionEventListener : Session Metrics {
    43819 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    7725006 nanoseconds spent preparing 3 JDBC statements;
    32401103 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    187632 nanoseconds spent executing 3 pre-partial-flushes;
    682052 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.720+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-8] i.StatisticalLoggingSessionEventListener : Session Metrics {
    26141 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    10368270 nanoseconds spent preparing 3 JDBC statements;
    34429352 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    325417 nanoseconds spent executing 3 pre-partial-flushes;
    714843 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.722+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-5] i.StatisticalLoggingSessionEventListener : Session Metrics {
    40403 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    7547276 nanoseconds spent preparing 3 JDBC statements;
    34193132 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    162402 nanoseconds spent executing 3 pre-partial-flushes;
    303671 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.722+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-2] i.StatisticalLoggingSessionEventListener : Session Metrics {
    28515 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    5101791 nanoseconds spent preparing 3 JDBC statements;
    36005461 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    142372 nanoseconds spent executing 3 pre-partial-flushes;
    274479 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.722+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-9] i.StatisticalLoggingSessionEventListener : Session Metrics {
    24009 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    6993782 nanoseconds spent preparing 3 JDBC statements;
    37653878 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    141839 nanoseconds spent executing 3 pre-partial-flushes;
    407927 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.722+02:00  INFO 3065884 --- [bank-app] [pool-3-thread-7] i.StatisticalLoggingSessionEventListener : Session Metrics {
    35318 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    4859379 nanoseconds spent preparing 3 JDBC statements;
    36184581 nanoseconds spent executing 3 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    211877 nanoseconds spent executing 3 pre-partial-flushes;
    344475 nanoseconds spent executing 3 partial-flushes (flushing a total of 3 entities and 3 collections)
}
2025-02-18T15:26:19.803+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.805+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    15556 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    316095 nanoseconds spent preparing 1 JDBC statements;
    226531 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
2025-02-18T15:26:19.808+02:00 DEBUG 3065884 --- [bank-app] [           main] org.hibernate.SQL                        : select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.email=?
2025-02-18T15:26:19.810+02:00  INFO 3065884 --- [bank-app] [           main] i.StatisticalLoggingSessionEventListener : Session Metrics {
    20098 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    94135 nanoseconds spent preparing 1 JDBC statements;
    433948 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
Initial balance user1: 100.0
Final balance user1: 50.0
Initial balance user2: 100.0
Final balance user2: 150.0
Successful transfers: 1
Failed transfers: 9
]]></system-out>
    <system-err><![CDATA[Mockito is currently self-attaching to enable the inline-mock-maker. This will no longer work in future releases of the JDK. Please add Mockito as an agent to your build what is described in Mockito's documentation: https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0.3
WARNING: A Java agent has been loaded dynamically (/home/yair/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
Transfer failed from user1: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user2: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user2: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user2: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user2: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user1: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user2: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user1: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
Transfer failed from user1: org.hibernate.exception.LockAcquisitionException: JDBC exception executing SQL [select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update] [Deadlock detected. The current transaction was rolled back. Details: "BANK_USER"; SQL statement:
select u1_0.id,u1_0.balance,u1_0.email,u1_0.name,u1_0.phone,u1_0.version from bank_user u1_0 where u1_0.id=? for update [40001-232]] [n/a]
]]></system-err>
  </testcase>
</testsuite>
=== File: target/surefire-reports/com.bank.service.BankServiceConcurrencyTest.txt ===
-------------------------------------------------------------------------------
Test set: com.bank.service.BankServiceConcurrencyTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 9.055 s <<< FAILURE! -- in com.bank.service.BankServiceConcurrencyTest
com.bank.service.BankServiceConcurrencyTest.testConcurrentTransfersSameAmount -- Time elapsed: 1.972 s <<< FAILURE!
org.opentest4j.AssertionFailedError: User1 balance mismatch. Expected: 100.00, Actual: 50.00 ==> expected: <100.0> but was: <50.0>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:86)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1024)
	at com.bank.service.BankServiceConcurrencyTest.testConcurrentTransfersSameAmount(BankServiceConcurrencyTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


=== File: target/surefire-reports/TEST-com.bank.BankAppApplicationTests.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.bank.BankAppApplicationTests" time="2.463" tests="1" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="23"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/yair/git2/prjects/bank-app/target/test-classes:/home/yair/git2/prjects/bank-app/target/classes:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.2/spring-boot-starter-web-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.2/spring-boot-starter-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.2/spring-boot-starter-logging-3.4.2.jar:/home/yair/.m2/repository/ch/qos/logback/logback-classic/1.5.16/logback-classic-1.5.16.jar:/home/yair/.m2/repository/ch/qos/logback/logback-core/1.5.16/logback-core-1.5.16.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/yair/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/yair/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/yair/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.2/spring-boot-starter-json-3.4.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.2/spring-boot-starter-tomcat-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/yair/.m2/repository/org/springframework/spring-web/6.2.2/spring-web-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-beans/6.2.2/spring-beans-6.2.2.jar:/home/yair/.m2/repository/io/micrometer/micrometer-observation/1.14.3/micrometer-observation-1.14.3.jar:/home/yair/.m2/repository/io/micrometer/micrometer-commons/1.14.3/micrometer-commons-1.14.3.jar:/home/yair/.m2/repository/org/springframework/spring-webmvc/6.2.2/spring-webmvc-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-context/6.2.2/spring-context-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-expression/6.2.2/spring-expression-6.2.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.2/spring-boot-starter-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.2/spring-boot-starter-jdbc-3.4.2.jar:/home/yair/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/yair/.m2/repository/org/springframework/spring-jdbc/6.2.2/spring-jdbc-6.2.2.jar:/home/yair/.m2/repository/org/hibernate/orm/hibernate-core/6.6.5.Final/hibernate-core-6.6.5.Final.jar:/home/yair/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/yair/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/yair/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/yair/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/yair/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/yair/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/yair/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/yair/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/yair/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/yair/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/yair/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-jpa/3.4.2/spring-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-commons/3.4.2/spring-data-commons-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-orm/6.2.2/spring-orm-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-tx/6.2.2/spring-tx-6.2.2.jar:/home/yair/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/yair/.m2/repository/org/springframework/spring-aspects/6.2.2/spring-aspects-6.2.2.jar:/home/yair/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/yair/.m2/repository/mysql/mysql-connector-java/8.0.28/mysql-connector-java-8.0.28.jar:/home/yair/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.2/spring-boot-devtools-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot/3.4.2/spring-boot-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.2/spring-boot-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.2/spring-boot-starter-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test/3.4.2/spring-boot-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.2/spring-boot-test-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/yair/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/yair/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/yair/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/yair/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/yair/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/yair/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/yair/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/yair/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/yair/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/yair/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/yair/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/yair/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/yair/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/yair/.m2/repository/org/springframework/spring-core/6.2.2/spring-core-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-jcl/6.2.2/spring-jcl-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-test/6.2.2/spring-test-6.2.2.jar:/home/yair/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.2/spring-boot-starter-validation-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/yair/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/yair/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/yair/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/yair/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/yair/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.4.2/spring-boot-starter-security-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-aop/6.2.2/spring-aop-6.2.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-config/6.4.2/spring-security-config-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-core/6.4.2/spring-security-core-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-crypto/6.4.2/spring-security-crypto-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-web/6.4.2/spring-security-web-6.4.2.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Jerusalem"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="23"/>
    <property name="APPLICATION_NAME" value="bank-app"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/jdk-23.0.1-oracle-x64/lib"/>
    <property name="sun.java.command" value="/home/yair/git2/prjects/bank-app/target/surefire/surefirebooter-20250218152201708_3.jar /home/yair/git2/prjects/bank-app/target/surefire 2025-02-18T15-22-01_504-jvmRun1 surefire-20250218152201708_1tmp surefire_0-20250218152201708_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/yair/git2/prjects/bank-app/target/test-classes:/home/yair/git2/prjects/bank-app/target/classes:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.2/spring-boot-starter-web-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.2/spring-boot-starter-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.2/spring-boot-starter-logging-3.4.2.jar:/home/yair/.m2/repository/ch/qos/logback/logback-classic/1.5.16/logback-classic-1.5.16.jar:/home/yair/.m2/repository/ch/qos/logback/logback-core/1.5.16/logback-core-1.5.16.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/yair/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/yair/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/yair/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/yair/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.2/spring-boot-starter-json-3.4.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.2/spring-boot-starter-tomcat-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/yair/.m2/repository/org/springframework/spring-web/6.2.2/spring-web-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-beans/6.2.2/spring-beans-6.2.2.jar:/home/yair/.m2/repository/io/micrometer/micrometer-observation/1.14.3/micrometer-observation-1.14.3.jar:/home/yair/.m2/repository/io/micrometer/micrometer-commons/1.14.3/micrometer-commons-1.14.3.jar:/home/yair/.m2/repository/org/springframework/spring-webmvc/6.2.2/spring-webmvc-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-context/6.2.2/spring-context-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-expression/6.2.2/spring-expression-6.2.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.2/spring-boot-starter-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.2/spring-boot-starter-jdbc-3.4.2.jar:/home/yair/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/yair/.m2/repository/org/springframework/spring-jdbc/6.2.2/spring-jdbc-6.2.2.jar:/home/yair/.m2/repository/org/hibernate/orm/hibernate-core/6.6.5.Final/hibernate-core-6.6.5.Final.jar:/home/yair/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/yair/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/yair/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/yair/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/yair/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/yair/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/yair/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/yair/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/yair/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/yair/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/yair/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/yair/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-jpa/3.4.2/spring-data-jpa-3.4.2.jar:/home/yair/.m2/repository/org/springframework/data/spring-data-commons/3.4.2/spring-data-commons-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-orm/6.2.2/spring-orm-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-tx/6.2.2/spring-tx-6.2.2.jar:/home/yair/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/yair/.m2/repository/org/springframework/spring-aspects/6.2.2/spring-aspects-6.2.2.jar:/home/yair/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/yair/.m2/repository/mysql/mysql-connector-java/8.0.28/mysql-connector-java-8.0.28.jar:/home/yair/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.2/spring-boot-devtools-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot/3.4.2/spring-boot-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.2/spring-boot-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.2/spring-boot-starter-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test/3.4.2/spring-boot-test-3.4.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.2/spring-boot-test-autoconfigure-3.4.2.jar:/home/yair/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/yair/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/yair/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/yair/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/yair/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/yair/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/yair/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/yair/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/yair/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/yair/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/yair/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/yair/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/yair/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/yair/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/yair/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/yair/.m2/repository/org/springframework/spring-core/6.2.2/spring-core-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-jcl/6.2.2/spring-jcl-6.2.2.jar:/home/yair/.m2/repository/org/springframework/spring-test/6.2.2/spring-test-6.2.2.jar:/home/yair/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.2/spring-boot-starter-validation-3.4.2.jar:/home/yair/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/yair/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/yair/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/yair/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/yair/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/yair/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/yair/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/yair/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/home/yair/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/yair/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/yair/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.4.2/spring-boot-starter-security-3.4.2.jar:/home/yair/.m2/repository/org/springframework/spring-aop/6.2.2/spring-aop-6.2.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-config/6.4.2/spring-security-config-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-core/6.4.2/spring-security-core-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-crypto/6.4.2/spring-security-crypto-6.4.2.jar:/home/yair/.m2/repository/org/springframework/security/spring-security-web/6.4.2/spring-security-web-6.4.2.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/yair"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-10-15"/>
    <property name="java.home" value="/usr/lib/jvm/jdk-23.0.1-oracle-x64"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/yair/git2/prjects/bank-app"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/home/yair/git2/prjects/bank-app/target/surefire/surefirebooter-20250218152201708_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="23.0.1+11-39"/>
    <property name="user.name" value="yair"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.8.0-52-generic"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="/home/yair/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="23.0.1"/>
    <property name="user.dir" value="/home/yair/git2/prjects/bank-app"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="3061977"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="23.0.1+11-39"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="67.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[bank-app] "/>
  </properties>
  <testcase name="contextLoads" classname="com.bank.BankAppApplicationTests" time="1.003">
    <system-out><![CDATA[15:22:03.151 [main] INFO org.springframework.boot.devtools.restart.RestartApplicationListener -- Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.2)

2025-02-18T15:22:03.539+02:00  INFO 3061977 --- [bank-app] [           main] com.bank.BankAppApplicationTests         : Starting BankAppApplicationTests using Java 23.0.1 with PID 3061977 (started by yair in /home/yair/git2/prjects/bank-app)
2025-02-18T15:22:03.542+02:00  INFO 3061977 --- [bank-app] [           main] com.bank.BankAppApplicationTests         : No active profile set, falling back to 1 default profile: "default"
2025-02-18T15:22:03.752+02:00  INFO 3061977 --- [bank-app] [           main] com.bank.BankAppApplicationTests         : Started BankAppApplicationTests in 0.616 seconds (process running for 1.934)
]]></system-out>
    <system-err><![CDATA[Mockito is currently self-attaching to enable the inline-mock-maker. This will no longer work in future releases of the JDK. Please add Mockito as an agent to your build what is described in Mockito's documentation: https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0.3
WARNING: A Java agent has been loaded dynamically (/home/yair/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
  </testcase>
</testsuite>
=== File: target/surefire-reports/com.bank.BankAppApplicationTests.txt ===
-------------------------------------------------------------------------------
Test set: com.bank.BankAppApplicationTests
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.463 s -- in com.bank.BankAppApplicationTests

=== File: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst ===
/home/yair/git2/prjects/bank-app/src/test/java/com/bank/BankAppApplicationTests.java
/home/yair/git2/prjects/bank-app/src/test/java/com/bank/service/BankServiceConcurrencyTest.java

=== File: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst ===
com/bank/BankAppApplicationTests.class
com/bank/service/BankServiceConcurrencyTest.class

=== File: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst ===
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/BankApplication.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/config/SecurityConfig.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/controller/UserController.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/exception/GlobalExceptionHandler.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/exception/TokenRefreshException.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/exception/ValidationException.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/model/RefreshToken.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/model/Transaction.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/model/User.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/payload/AuthResponse.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/repository/RefreshTokenRepository.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/repository/UserRepository.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/JwtProperties.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/JwtRequestFilter.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/JwtService.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/util/JwtSecretGenerator.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/service/BankService.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/service/RefreshTokenService.java

=== File: target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst ===
com/bank/BankApplication.class
com/bank/service/BankService.class
com/bank/security/jwt/JwtService.class
com/bank/security/jwt/util/JwtSecretGenerator.class
com/bank/config/SecurityConfig.class
com/bank/model/User.class
com/bank/security/jwt/JwtProperties$Expiration.class
com/bank/service/RefreshTokenService.class
com/bank/controller/UserController.class
com/bank/exception/ValidationException.class
com/bank/payload/AuthResponse.class
com/bank/security/jwt/JwtRequestFilter.class
com/bank/repository/RefreshTokenRepository.class
com/bank/security/jwt/JwtProperties.class
com/bank/model/Transaction.class
com/bank/exception/GlobalExceptionHandler.class
com/bank/exception/TokenRefreshException.class
com/bank/repository/UserRepository.class
com/bank/model/RefreshToken.class

=== File: target/classes/static/index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Bank</title>
    <style>
        .error { color: red; display: none; }
        .success { color: green; display: none; }
        .form-group { margin-bottom: 10px; }
        .account-section { display: none; }
        .welcome-message { font-weight: bold; margin-bottom: 10px; }
    </style>
</head>
<body>
    <h2>Simple Bank</h2>
    
    <!-- Login/Register Section -->
    <div id="authSection">
        <!-- Registration Form -->
        <h3>Register</h3>
        <div class="form-group">
            <input type="text" id="name" placeholder="Name" pattern="[A-Za-z\s]+" maxlength="50" required />
            <div id="nameError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="email" id="email" placeholder="Email" maxlength="100" required />
            <div id="emailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="tel" id="phone" placeholder="Phone (e.g., +1234567890)" 
                   pattern="\+?[1-9][0-9]{7,14}" required />
            <div id="phoneError" class="error"></div>
        </div>
        <button onclick="register()">Register</button>
        <div id="registerSuccess" class="success">Registration successful!</div>

        <!-- Login Form -->
        <h3>Login</h3>
        <div class="form-group">
            <input type="email" id="loginEmail" placeholder="Email" required />
            <div id="loginError" class="error"></div>
        </div>
        <button onclick="login()">Login</button>
    </div>

    <!-- Account Section (visible after login) -->
    <div id="accountSection" class="account-section">
        <div class="welcome-message">Welcome, <span id="userName"></span>!</div>
        <button onclick="logout()" style="float: right;">Logout</button>
        
        <h3>Account Details</h3>
        <p><strong>Balance:</strong> $<span id="balance">0.00</span></p>
        
        <!-- Transfer Funds -->
        <h3>Transfer Money</h3>
        <div class="form-group">
            <select id="toEmail" required>
                <option value="">Select recipient</option>
            </select>
            <div id="transferEmailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="number" id="amount" placeholder="Amount" min="0.01" step="0.01" required />
            <div id="transferAmountError" class="error"></div>
        </div>
        <button onclick="transfer()">Transfer</button>
        <div id="transferSuccess" class="success">Transfer successful!</div>
        <div id="transferError" class="error"></div>
    </div>

    <script>
        let accessToken = null;
        let refreshToken = null;

        let loggedInUser;
        let allUsers = [];

        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

        // Update the showError and showSuccess functions:
function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        console.log('Showing error:', elementId, message);  // Debug log
    } else {
        console.error('Error element not found:', elementId);  // Debug log
    }
}

function showSuccess(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'block';
        console.log('Showing success:', elementId);  // Debug log
        setTimeout(() => {
            element.style.display = 'none';
        }, 3000);
    } else {
        console.error('Success element not found:', elementId);  // Debug log
    }
}
        function clearInputs(inputs) {
            inputs.forEach(id => {
                document.getElementById(id).value = '';
            });
        }

        function validateEmail(email) {
            const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/;
            return re.test(email);
        }

        function validatePhone(phone) {
            const re = /^\+?[1-9][0-9]{7,14}$/;
            return re.test(phone);
        }

        function validateName(name) {
            const re = /^[a-zA-Z\s]{2,50}$/;
            return re.test(name);
        }

    async function register() {
    clearErrors();
    
    const name = document.getElementById('name').value.trim();
    const email = document.getElementById('email').value.trim();
    const phone = document.getElementById('phone').value.trim();
    
    console.log('Attempting registration with:', { name, email, phone });  // Debug log
    // Validate inputs
    let hasError = false;
    
    if (!validateName(name)) {
        showError('nameError', 'Name must be 2-50 characters and contain only letters and spaces');
        hasError = true;
    }
    
    if (!validateEmail(email)) {
        showError('emailError', 'Invalid email format');
        hasError = true;
    }
    
    if (!validatePhone(phone)) {
        showError('phoneError', 'Phone must be 8-15 digits and may start with +');
        hasError = true;
    }
    if (hasError) return;

    try {
        const response = await fetch('/api/users/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, email, phone })
        });

        if (!response.ok) {
            const errorData = await response.json();
            Object.keys(errorData).forEach(key => {
                showError(`${key}Error`, errorData[key]);
            });
            return;
        }

        const data = await response.json();
        // Store tokens
        accessToken = data.accessToken;
        refreshToken = data.refreshToken;
        loggedInUser = {
            email: data.email,
            name: name,
            balance: data.balance
        };
        
        showSuccess('registerSuccess');
        clearInputs(['name', 'email', 'phone']);
        showAccountSection(true);
    } catch (error) {
        showError('nameError', 'Registration failed. Please try again.');
    }
}

async function login() {
    clearErrors();
    const email = document.getElementById('loginEmail').value.trim();
    
    if (!validateEmail(email)) {
        showError('loginError', 'Invalid email format');
        return;
    }

    try {
        const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
            method: 'POST'
        });

        if (!response.ok) {
            showError('loginError', 'Login failed. Please check your email.');
            return;
        }

        const data = await response.json();
        accessToken = data.accessToken;
        refreshToken = data.refreshToken;
        loggedInUser = {
            email: data.email,
            balance: data.balance
        };
        
        clearInputs(['loginEmail']);
        showAccountSection(true);
    } catch (error) {
        showError('loginError', 'Login failed. Please try again.');
    }
} 

async function refreshAccessToken() {
    try {
        const response = await fetch('/api/users/refresh', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ refreshToken })
        });

        if (!response.ok) {
            // If refresh fails, log out the user
            logout();
            return false;
        }

        const data = await response.json();
        accessToken = data.accessToken;
        return true;
    } catch (error) {
        logout();
        return false;
    }
}

async function getAllUsers() {
    try {
        console.log('Fetching all users with token:', accessToken);  // Debug log
        const response = await fetch('/api/users/all', {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        
        console.log('getAllUsers response status:', response.status);  // Debug log
        
        if (response.status === 401) {
            console.log('Token expired, attempting refresh...');  // Debug log
            if (await refreshAccessToken()) {
                return getAllUsers(); // Retry with new token
            }
            return;
        }
        
        if (response.ok) {
            allUsers = await response.json();
            console.log('Retrieved users:', allUsers);  // Debug log
            updateRecipientsList();
        } else {
            console.error('Failed to fetch users:', response.status);
        }
    } catch (error) {
        console.error('Failed to fetch users:', error);
    }
}


        function updateRecipientsList() {
            const select = document.getElementById('toEmail');
            select.innerHTML = '<option value="">Select recipient</option>';
            
            allUsers.forEach(user => {
                if (loggedInUser && user.email !== loggedInUser.email) {
                    const option = document.createElement('option');
                    option.value = user.email;
                    option.textContent = `${user.name} (${user.email})`;
                    select.appendChild(option);
                }
            });
        }

        function showAccountSection(show) {
    console.log('Showing account section:', show, 'User:', loggedInUser);  // Debug log
    document.getElementById('authSection').style.display = show ? 'none' : 'block';
    document.getElementById('accountSection').style.display = show ? 'block' : 'none';
    if (show) {
        document.getElementById('userName').textContent = loggedInUser.name;
        updateBalance();
        getAllUsers(); // Fetch users for the dropdown
    }
}


        function logout() {
    accessToken = null;
    refreshToken = null;
    loggedInUser = null;
    showAccountSection(false);
    clearInputs(['loginEmail']);
}

      
        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

       

        async function login() {
            clearErrors();
            const email = document.getElementById('loginEmail').value.trim();
            
            if (!validateEmail(email)) {
                showError('loginError', 'Invalid email format');
                return;
            }

            try {
                const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('loginError', 'Login failed. Please check your email.');
                    return;
                }

                loggedInUser = await response.json();
                clearInputs(['loginEmail']);
                showAccountSection(true);
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

    async function transfer() {
        clearErrors();
        const toEmail = document.getElementById('toEmail').value;
        const amount = document.getElementById('amount').value;
        
        console.log('Transfer attempt:', { toEmail, amount, token: accessToken }); // Debug log

        if (!toEmail || amount <= 0) {

            showError('transferEmailError', 'Please select a recipient');
            // Validation remains the same...
            return;
        }

        if (amount <= 0) {
            showError('transferAmountError', 'Amount must be greater than 0');
            return;
        }

        try {
            const response = await fetch(`/api/users/transfer?fromEmail=${encodeURIComponent(loggedInUser.email)}&toEmail=${encodeURIComponent(toEmail)}&amount=${amount}`, {
                method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
            });

            console.log('Transfer response:', response.status); // Debug log

            if (response.status === 401 || response.status === 403) {
            // Token might be expired, try to refresh
            console.log('Attempting token refresh...'); // Debug log
            if (await refreshAccessToken()) {
                return transfer(); // Retry with new token
            }
            showError('transferError', 'Authentication failed. Please login again.');
            return;
        }

            if (!response.ok) {
                const errorData = await response.text();
            console.error('Transfer failed:', errorData); // Debug log
            showError('transferError', `Transfer failed: ${errorData}`);
                return;
            }

            const newBalance = await response.json();
            loggedInUser.balance = newBalance;
            updateBalance();
            showSuccess('transferSuccess');
            clearInputs(['amount']);
            document.getElementById('toEmail').value = '';
        } catch (error) {
            showError('transferError', 'Transfer failed. Please try again.');
        }
        }
        
        function updateBalance() {
            if (loggedInUser) {
                document.getElementById('balance').innerText = loggedInUser.balance.toFixed(2);
            }
        }
    </script>
</body>
</html>
=== File: target/classes/application.properties ===
spring.application.name=bank-app

# Database connection details
spring.datasource.url=jdbc:mysql://localhost:3306/bankdb
spring.datasource.username=bankuser
spring.datasource.password=password123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#JWT details
jwt.secret=ODseuvVDYRWAm0fnXTsbaN3FNakYiQNwNtlBFF8s7Ew=
jwt.expiration.access=3600000
jwt.expiration.refresh=86400000

=== File: target/test-classes/application-test.properties ===
# Application
spring.application.name=bank-app

# src/test/resources/application.properties
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.generate_statistics=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG

# Set test JWT secret
jwt.secret=testsecretkeytestsecretkeytestsecretkeytestsecretkey
jwt.expiration.access=3600000
jwt.expiration.refresh=86400
=== File: mvnw.cmd ===
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

=== File: mvnw ===
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

=== File: pom.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.bank-app</groupId>
	<artifactId>bank-app</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>bank-app</name>
	<description>basic bank app</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		 <!-- Spring Boot Starter Data JPA for DB interactions -->
    	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

    <!-- MySQL Driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.28</version> <!-- Add the version number here -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
    		<groupId>org.springframework.boot</groupId>
    	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.11.4</version>
			<scope>test</scope>
		</dependency>
		 <dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
 		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>				
				</plugin>
		</plugins>

	</build>

</project>
