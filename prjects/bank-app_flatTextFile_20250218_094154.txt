
=== File: src/test/java/com/bank/BankAppApplicationTests.java ===
package com.bank;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(classes = BankAppApplicationTests.class)
class BankAppApplicationTests {

	@Test
	void contextLoads() {
	}

}

=== File: src/test/java/com/bank/service/BankServiceConcurrencyTest.java ===
package com.bank.service;

import com.bank.model.User;
import com.bank.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class BankServiceConcurrencyTest {

    @Autowired
    private BankService bankService;

    @Autowired
    private UserRepository userRepository;

    private User user1;
    private User user2;

    @BeforeEach
    @Transactional
    public void setup() {
        // Clean up existing test users
        userRepository.deleteAll();

        // Create test users
        user1 = bankService.registerUser("John Doe", "test1@test.com", "1234567890");
        user2 = bankService.registerUser("Jane Doe", "test2@test.com", "1234567891");
    }

    @Test
    public void testConcurrentTransfers() throws InterruptedException {
        int numberOfThreads = 10;
        double transferAmount = 10.0;
        ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads);
        CountDownLatch latch = new CountDownLatch(numberOfThreads);
        AtomicInteger successfulTransfers = new AtomicInteger(0);
        AtomicInteger failedTransfers = new AtomicInteger(0);

        // Initial balances
        double initialBalance1 = user1.getBalance();
        double initialBalance2 = user2.getBalance();

        // Start concurrent transfers
        for (int i = 0; i < numberOfThreads; i++) {
            executorService.execute(() -> {
                try {
                    bankService.transferFunds(user1.getEmail(), user2.getEmail(), transferAmount);
                    successfulTransfers.incrementAndGet();
                } catch (Exception e) {
                    failedTransfers.incrementAndGet();
                } finally {
                    latch.countDown();
                }
            });
        }

        // Wait for all threads to complete
        latch.await(10, TimeUnit.SECONDS);
        executorService.shutdown();

        // Refresh user data
        User finalUser1 = userRepository.findByEmail(user1.getEmail());
        User finalUser2 = userRepository.findByEmail(user2.getEmail());

        // Verify results
        System.out.println("Initial balance user1: " + initialBalance1);
        System.out.println("Final balance user1: " + finalUser1.getBalance());
        System.out.println("Initial balance user2: " + initialBalance2);
        System.out.println("Final balance user2: " + finalUser2.getBalance());
        System.out.println("Successful transfers: " + successfulTransfers.get());
        System.out.println("Failed transfers: " + failedTransfers.get());

        // Assert the final balances are correct
        assertEquals(
            initialBalance1 - (successfulTransfers.get() * transferAmount),
            finalUser1.getBalance(),
            0.01,
            "User1 balance is incorrect"
        );
        assertEquals(
            initialBalance2 + (successfulTransfers.get() * transferAmount),
            finalUser2.getBalance(),
            0.01,
            "User2 balance is incorrect"
        );

        // Assert that all transfers were either successful or failed properly
        assertEquals(
            numberOfThreads,
            successfulTransfers.get() + failedTransfers.get(),
            "Total number of operations doesn't match"
        );
    }

    @Test
    public void testConcurrentTransfersSameAmount() throws InterruptedException {
        int numberOfThreads = 5;
        ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads * 2);
        CountDownLatch latch = new CountDownLatch(numberOfThreads * 2);
        AtomicInteger successfulTransfers = new AtomicInteger(0);
        AtomicInteger failedTransfers = new AtomicInteger(0);

        // Initial balances
        double initialBalance1 = user1.getBalance();
        double initialBalance2 = user2.getBalance();

        // Start concurrent transfers in both directions
        for (int i = 0; i < numberOfThreads; i++) {
            // Transfer from user1 to user2
            executorService.execute(() -> {
                try {
                    bankService.transferFunds(user1.getEmail(), user2.getEmail(), 50.0);
                    successfulTransfers.incrementAndGet();
                } catch (Exception e) {
                    failedTransfers.incrementAndGet();
                } finally {
                    latch.countDown();
                }
            });

            // Transfer from user2 to user1
            executorService.execute(() -> {
                try {
                    bankService.transferFunds(user2.getEmail(), user1.getEmail(), 50.0);
                    successfulTransfers.incrementAndGet();
                } catch (Exception e) {
                    failedTransfers.incrementAndGet();
                } finally {
                    latch.countDown();
                }
            });
        }

        // Wait for all threads to complete
        latch.await(10, TimeUnit.SECONDS);
        executorService.shutdown();

        // Refresh user data
        User finalUser1 = userRepository.findByEmail(user1.getEmail());
        User finalUser2 = userRepository.findByEmail(user2.getEmail());

        // Verify results
        System.out.println("Initial balance user1: " + initialBalance1);
        System.out.println("Final balance user1: " + finalUser1.getBalance());
        System.out.println("Initial balance user2: " + initialBalance2);
        System.out.println("Final balance user2: " + finalUser2.getBalance());
        System.out.println("Successful transfers: " + successfulTransfers.get());
        System.out.println("Failed transfers: " + failedTransfers.get());

        // Since we're transferring the same amount in both directions,
        // final balances should be equal to initial balances
        assertEquals(
            initialBalance1,
            finalUser1.getBalance(),
            0.01,
            "User1 final balance should match initial balance"
        );
        assertEquals(
            initialBalance2,
            finalUser2.getBalance(),
            0.01,
            "User2 final balance should match initial balance"
        );
    }
}
=== File: src/test/resources/application-test.properties ===
// src/test/resources/application.properties
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
=== File: src/main/java/com/bank/repository/RefreshTokenRepository.java ===
package com.bank.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bank.model.RefreshToken;

@Repository
public interface RefreshTokenRepository extends JpaRepository<RefreshToken, Long> {

    RefreshToken findByToken(String token);

}
    




=== File: src/main/java/com/bank/repository/UserRepository.java ===
package com.bank.repository;


import com.bank.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    User findByEmail(String email);
}

=== File: src/main/java/com/bank/config/SecurityConfig.java ===
package com.bank.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.bank.security.jwt.JwtRequestFilter;

import org.springframework.beans.factory.annotation.Autowired;


@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private JwtRequestFilter jwtRequestFilter;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())  // Disable CSRF for API endpoints
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/users/login", "/api/users/register", "/api/users/refresh").permitAll()
                .anyRequest().authenticated())
            .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
        
        return http.build();
    }
}
=== File: src/main/java/com/bank/payload/AuthResponse.java ===
package com.bank.payload;



public class AuthResponse {
    private String accessToken;
    private String refreshToken;
    private String email;
    private double balance;

    public AuthResponse(String accessToken, String refreshToken, String email, double balance) {
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.email = email;
        this.balance = balance;
    }

    // Getters and setters
    public String getAccessToken() { return accessToken; }
    public void setAccessToken(String accessToken) { this.accessToken = accessToken; }
    public String getRefreshToken() { return refreshToken; }
    public void setRefreshToken(String refreshToken) { this.refreshToken = refreshToken; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}
=== File: src/main/java/com/bank/model/User.java ===
package com.bank.model;


import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "bank_user")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 50, message = "Name must be between 2 and 50 characters")
    @Pattern(regexp = "^[a-zA-Z\\s]+$", message = "Name can only contain letters and spaces")
    private String name;

    @NotBlank(message = "Email is required")
    @Email(regexp = "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,63}$", 
           flags = Pattern.Flag.CASE_INSENSITIVE,
           message = "Invalid email format")
    @Size(max = 100, message = "Email must not exceed 100 characters")
    private String email;

    @NotBlank(message = "Phone number is required")
    @Pattern(regexp = "^\\+?[1-9][0-9]{7,14}$", 
            message = "Phone number must be between 8 and 15 digits and may start with +")
    private String phone;

    private double balance = 100.00;  // Default balance of 100 USD

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}
=== File: src/main/java/com/bank/model/Transaction.java ===
package com.bank.model;

public class Transaction {
    private double amount;

    public Transaction() {}

    public Transaction(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
=== File: src/main/java/com/bank/model/RefreshToken.java ===
package com.bank.model;

import java.time.Instant;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "refresh_token")
public class RefreshToken {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    private User user;

    @Column(nullable = false, unique = true)
    private String token;

    @Column(nullable = false)
    private Instant expiryDate;

    public Long getId() {
        return id;
    }   

    public void setId(Long id) {
        this.id = id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }   

    public Instant getExpiryDate() {
        return expiryDate;
    }   

    public void setExpiryDate(Instant expiryDate) {
        this.expiryDate = expiryDate;
    }
}

=== File: src/main/java/com/bank/security/jwt/JwtRequestFilter.java ===
package com.bank.security.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
import java.util.ArrayList;
import com.bank.service.BankService;
import com.bank.model.User;
import com.bank.security.jwt.JwtService;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {
    @Autowired
    private JwtService jwtService;
    
    @Autowired
    private BankService bankService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {
        
        final String authHeader = request.getHeader("Authorization");

        String email = null;
        String jwt = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            jwt = authHeader.substring(7);
            try {
                email = jwtService.getEmailFromToken(jwt);
            } catch (Exception e) {
                // Token validation failed
            }
        }

        if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            User user = bankService.loginUser(email);
            if (jwtService.validateToken(jwt)) {
                // Set authentication in context
                UsernamePasswordAuthenticationToken authentication = 
                    new UsernamePasswordAuthenticationToken(user, null, new ArrayList<>());
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }
        chain.doFilter(request, response);
    }
}
=== File: src/main/java/com/bank/security/jwt/JwtService.java ===
package com.bank.security.jwt;


import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;

import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.io.Decoders;
import java.security.Key;
import java.util.Date;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.bank.model.User;

@Service
public class JwtService {
    @Value("${jwt.secret}")
    private String jwtSecret;

    @Value("${jwt.expiration.access}")
    private Long jwtAccessExpiration;

    @Value("${jwt.expiration.refresh}")
    private Long jwtRefreshExpiration;

    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public String generateAccessToken(User user) {
        return Jwts.builder()
                .setSubject(user.getEmail())
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtAccessExpiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public String generateRefreshToken(User user) {
        return Jwts.builder()
                .setSubject(user.getEmail())
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtRefreshExpiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public String getEmailFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token);
            return true;
        } catch (SecurityException | MalformedJwtException | ExpiredJwtException | UnsupportedJwtException | IllegalArgumentException e) {
            return false;
        }
    }
}
=== File: src/main/java/com/bank/security/jwt/util/JwtSecretGenerator.java ===
package com.bank.security.jwt.util;

import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import java.security.Key;

import io.jsonwebtoken.io.Encoders;

public class JwtSecretGenerator {
    public static void main(String[] args) {
        // Generate a secure key for HS256
        Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);
        
        // Convert it to Base64 encoded string
        String secretString = Encoders.BASE64.encode(key.getEncoded());
        
        System.out.println("Generated JWT Secret Key:");
        System.out.println(secretString);
    }
}
=== File: src/main/java/com/bank/controller/UserController.java ===
package com.bank.controller;

import com.bank.model.User;
import com.bank.model.RefreshToken;
import com.bank.service.BankService;
import com.bank.security.jwt.JwtService;
import com.bank.service.RefreshTokenService;

import jakarta.validation.Valid;

import com.bank.payload.AuthResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserController {
    @Autowired
    private BankService bankService;
    
    @Autowired
    private JwtService jwtService;
    
    @Autowired
    private RefreshTokenService refreshTokenService;

    // Registration endpoint - creates user and returns tokens
    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@Valid @RequestBody User user) {
        User newUser = bankService.registerUser(user.getName(), user.getEmail(), user.getPhone());
        
        String accessToken = jwtService.generateAccessToken(newUser);
        RefreshToken refreshToken = refreshTokenService.createRefreshToken(newUser);
        
        return ResponseEntity.ok(new AuthResponse(
            accessToken,
            refreshToken.getToken(),
            newUser.getEmail(),
            newUser.getBalance()
        ));
    }

    // Login endpoint - validates user and returns tokens
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestParam String email) {
        User user = bankService.loginUser(email);
        if (user != null) {
            String accessToken = jwtService.generateAccessToken(user);
            RefreshToken refreshToken = refreshTokenService.createRefreshToken(user);
            
            return ResponseEntity.ok(new AuthResponse(
                accessToken,
                refreshToken.getToken(),
                user.getEmail(),
                user.getBalance()
            ));
        }
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    }

    // Token refresh endpoint
    @PostMapping("/refresh")
    public ResponseEntity<?> refreshToken(@RequestParam String refreshToken) {
        try {
            RefreshToken token = refreshTokenService.findByToken(refreshToken)
                .orElseThrow(() -> new RuntimeException("Refresh token not found"));

            token = refreshTokenService.verifyExpiration(token);
            User user = token.getUser();
            
            String accessToken = jwtService.generateAccessToken(user);
            
            return ResponseEntity.ok(new AuthResponse(
                accessToken,
                refreshToken,
                user.getEmail(),
                user.getBalance()
            ));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body("Error: " + e.getMessage());
        }
    }

    // Transfer endpoint - now requires authentication
    @PostMapping("/transfer")
    public ResponseEntity<Double> transferFunds(
            @RequestParam String fromEmail,
            @RequestParam String toEmail,
            @RequestParam double amount) {
        double newBalance = bankService.transferFunds(fromEmail, toEmail, amount);
        return ResponseEntity.ok(newBalance);
    }

    @GetMapping("/all")
    public ResponseEntity<?> getAllUsers() {
        return ResponseEntity.ok(bankService.getAllUsers());
    }
}
=== File: src/main/java/com/bank/service/RefreshTokenService.java ===
package com.bank.service;

import java.time.Instant;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.bank.exception.TokenRefreshException;
import com.bank.model.RefreshToken;
import com.bank.model.User;
import com.bank.repository.RefreshTokenRepository;
import com.bank.repository.UserRepository;

@Service
public class RefreshTokenService {
    @Autowired
    private RefreshTokenRepository refreshTokenRepository;
    
    @Autowired
    private UserRepository userRepository;

    @Value("${jwt.expiration.refresh}")
    private Long refreshTokenDurationMs;

    public RefreshToken createRefreshToken(User user) {
        RefreshToken refreshToken = new RefreshToken();
        refreshToken.setUser(user);
        refreshToken.setExpiryDate(Instant.now().plusMillis(refreshTokenDurationMs));
        refreshToken.setToken(UUID.randomUUID().toString());
        return refreshTokenRepository.save(refreshToken);
    }

    public RefreshToken verifyExpiration(RefreshToken token) {
        if (token.getExpiryDate().compareTo(Instant.now()) < 0) {
            refreshTokenRepository.delete(token);
            try {
                throw new TokenRefreshException(token.getToken(), "Refresh token was expired. Please make a new login request");
            } catch (TokenRefreshException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return token;
    }

    public RefreshToken findByToken(String refreshToken) {
      return  refreshTokenRepository.findByToken(refreshToken);
       
    }
}
=== File: src/main/java/com/bank/service/BankService.java ===
package com.bank.service;

import com.bank.exception.ValidationException;
import com.bank.model.User;
import com.bank.repository.UserRepository;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import jakarta.persistence.EntityManager;
import jakarta.persistence.LockModeType;
import jakarta.persistence.PessimisticLockException;
import org.springframework.dao.DataAccessException;

import java.util.ArrayList;
import java.util.List;

@Service
public class BankService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EntityManager entityManager;
    @Transactional
    public User registerUser(String name, String email, String phone) {
          // Additional custom validations
          List<String> errors = new ArrayList<>();

         // Check if email already exists
         if (userRepository.findByEmail(email) != null) {
            errors.add("Email already registered");
        }

         // If there are any errors, throw validation exception
         if (!errors.isEmpty()) {
            throw new ValidationException(errors);
        }

        User user = new User();
        user.setName(name.trim());
        user.setEmail(email.trim().toLowerCase());
        user.setPhone(phone.trim());
        return userRepository.save(user);
    }
    @Transactional(readOnly = true)
    public User loginUser(String email) {
        return userRepository.findByEmail(email);
    }
     @Transactional(isolation = Isolation.REPEATABLE_READ)
    public double transferFunds(String fromEmail, String toEmail, double amount) {
        try {
            // Find users and lock their rows
            User fromUser = entityManager.createQuery(
                    "SELECT u FROM User u WHERE u.email = :email", User.class)
                    .setParameter("email", fromEmail)
                    .setLockMode(LockModeType.PESSIMISTIC_WRITE)
                    .getSingleResult();

            User toUser = entityManager.createQuery(
                    "SELECT u FROM User u WHERE u.email = :email", User.class)
                    .setParameter("email", toEmail)
                    .setLockMode(LockModeType.PESSIMISTIC_WRITE)
                    .getSingleResult();

            // Validate transaction
            if (fromUser == null || toUser == null) {
                throw new IllegalArgumentException("One or both users not found");
            }

            if (fromUser.getBalance() < amount) {
                throw new IllegalArgumentException("Insufficient funds");
            }

            // Perform transfer
            fromUser.setBalance(fromUser.getBalance() - amount);
            toUser.setBalance(toUser.getBalance() + amount);

            // Save changes
            entityManager.merge(fromUser);
            entityManager.merge(toUser);
            entityManager.flush();

            return fromUser.getBalance();
        } catch (PessimisticLockException e) {
            throw new RuntimeException("Transaction could not be completed due to concurrent access. Please try again.", e);
        } catch (DataAccessException e) {
            throw new RuntimeException("Database error occurred during transfer", e);
        }
    }
    @Transactional(readOnly = true)
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    
}

=== File: src/main/java/com/bank/exception/GlobalExceptionHandler.java ===
package com.bank.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return ResponseEntity.badRequest().body(errors);
    }

    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<Map<String, List<String>>> handleCustomValidationExceptions(
            ValidationException ex) {
        Map<String, List<String>> errors = new HashMap<>();
        errors.put("errors", ex.getErrors());
        return ResponseEntity.badRequest().body(errors);
    }
}
=== File: src/main/java/com/bank/exception/ValidationException.java ===
package com.bank.exception;
import java.util.List;

public class ValidationException extends RuntimeException {
    private List<String> errors;

    public ValidationException(List<String> errors) {
        this.errors = errors;
    }

    public List<String> getErrors() {
        return errors;
    }
}
=== File: src/main/java/com/bank/exception/TokenRefreshException.java ===
package com.bank.exception;

public class TokenRefreshException extends Throwable {

    public TokenRefreshException(String token, String string) {
        super(string + " " + token);        
    }

}

=== File: src/main/java/com/bank/BankApplication.java ===
package com.bank;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableJpaRepositories(basePackages = "com.bank.repository")
@EntityScan(basePackages = "com.bank.model")
@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}
=== File: src/main/resources/static/index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Bank</title>
    <style>
        .error { color: red; display: none; }
        .success { color: green; display: none; }
        .form-group { margin-bottom: 10px; }
        .account-section { display: none; }
        .welcome-message { font-weight: bold; margin-bottom: 10px; }
    </style>
</head>
<body>
    <h2>Simple Bank</h2>
    
    <!-- Login/Register Section -->
    <div id="authSection">
        <!-- Registration Form -->
        <h3>Register</h3>
        <div class="form-group">
            <input type="text" id="name" placeholder="Name" pattern="[A-Za-z\s]+" maxlength="50" required />
            <div id="nameError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="email" id="email" placeholder="Email" maxlength="100" required />
            <div id="emailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="tel" id="phone" placeholder="Phone (e.g., +1234567890)" 
                   pattern="\+?[1-9][0-9]{7,14}" required />
            <div id="phoneError" class="error"></div>
        </div>
        <button onclick="register()">Register</button>
        <div id="registerSuccess" class="success">Registration successful!</div>

        <!-- Login Form -->
        <h3>Login</h3>
        <div class="form-group">
            <input type="email" id="loginEmail" placeholder="Email" required />
            <div id="loginError" class="error"></div>
        </div>
        <button onclick="login()">Login</button>
    </div>

    <!-- Account Section (visible after login) -->
    <div id="accountSection" class="account-section">
        <div class="welcome-message">Welcome, <span id="userName"></span>!</div>
        <button onclick="logout()" style="float: right;">Logout</button>
        
        <h3>Account Details</h3>
        <p><strong>Balance:</strong> $<span id="balance">0.00</span></p>
        
        <!-- Transfer Funds -->
        <h3>Transfer Money</h3>
        <div class="form-group">
            <select id="toEmail" required>
                <option value="">Select recipient</option>
            </select>
            <div id="transferEmailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="number" id="amount" placeholder="Amount" min="0.01" step="0.01" required />
            <div id="transferAmountError" class="error"></div>
        </div>
        <button onclick="transfer()">Transfer</button>
        <div id="transferSuccess" class="success">Transfer successful!</div>
        <div id="transferError" class="error"></div>
    </div>

    <script>
        let loggedInUser;
        let allUsers = [];

        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        function showSuccess(elementId) {
            document.getElementById(elementId).style.display = 'block';
            setTimeout(() => {
                document.getElementById(elementId).style.display = 'none';
            }, 3000);
        }

        function clearInputs(inputs) {
            inputs.forEach(id => {
                document.getElementById(id).value = '';
            });
        }

        function validateEmail(email) {
            const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/;
            return re.test(email);
        }

        function validatePhone(phone) {
            const re = /^\+?[1-9][0-9]{7,14}$/;
            return re.test(phone);
        }

        function validateName(name) {
            const re = /^[a-zA-Z\s]{2,50}$/;
            return re.test(name);
        }

        async function register() {
            clearErrors();
            
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value.trim();
            const phone = document.getElementById('phone').value.trim();
            
            // Validate inputs
            let hasError = false;
            
            if (!validateName(name)) {
                showError('nameError', 'Name must be 2-50 characters and contain only letters and spaces');
                hasError = true;
            }
            
            if (!validateEmail(email)) {
                showError('emailError', 'Invalid email format');
                hasError = true;
            }
            
            if (!validatePhone(phone)) {
                showError('phoneError', 'Phone must be 8-15 digits and may start with +');
                hasError = true;
            }
            
            if (hasError) return;

            try {
                const response = await fetch('/api/users/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, email, phone })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    Object.keys(errorData).forEach(key => {
                        showError(`${key}Error`, errorData[key]);
                    });
                    return;
                }

                const data = await response.json();
                showSuccess('registerSuccess');
                clearInputs(['name', 'email', 'phone']);
            } catch (error) {
                showError('nameError', 'Registration failed. Please try again.');
            }
        }

        async function login() {
            clearErrors();
            const email = document.getElementById('loginEmail').value.trim();
            
            if (!validateEmail(email)) {
                showError('loginError', 'Invalid email format');
                return;
            }

            try {
                const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('loginError', 'Login failed. Please check your email.');
                    return;
                }

                loggedInUser = await response.json();
                clearInputs(['loginEmail']);
                updateBalance();
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

        async function getAllUsers() {
            try {
                const response = await fetch('/api/users/all');
                if (response.ok) {
                    allUsers = await response.json();
                    updateRecipientsList();
                }
            } catch (error) {
                console.error('Failed to fetch users:', error);
            }
        }

        function updateRecipientsList() {
            const select = document.getElementById('toEmail');
            select.innerHTML = '<option value="">Select recipient</option>';
            
            allUsers.forEach(user => {
                if (loggedInUser && user.email !== loggedInUser.email) {
                    const option = document.createElement('option');
                    option.value = user.email;
                    option.textContent = `${user.name} (${user.email})`;
                    select.appendChild(option);
                }
            });
        }

        function showAccountSection(show) {
            document.getElementById('authSection').style.display = show ? 'none' : 'block';
            document.getElementById('accountSection').style.display = show ? 'block' : 'none';
            if (show) {
                document.getElementById('userName').textContent = loggedInUser.name;
                updateBalance();
                getAllUsers(); // Fetch users for the dropdown
            }
        }

        function logout() {
            loggedInUser = null;
            showAccountSection(false);
            clearInputs(['loginEmail']);
        }

        // Previous functions remain the same
        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

        // ... (keep all the validation and utility functions)

        async function login() {
            clearErrors();
            const email = document.getElementById('loginEmail').value.trim();
            
            if (!validateEmail(email)) {
                showError('loginError', 'Invalid email format');
                return;
            }

            try {
                const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('loginError', 'Login failed. Please check your email.');
                    return;
                }

                loggedInUser = await response.json();
                clearInputs(['loginEmail']);
                showAccountSection(true);
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

        // Update transfer function to use the dropdown
        async function transfer() {
            clearErrors();
            const toEmail = document.getElementById('toEmail').value;
            const amount = document.getElementById('amount').value;

            if (!toEmail) {
                showError('transferEmailError', 'Please select a recipient');
                return;
            }

            if (amount <= 0) {
                showError('transferAmountError', 'Amount must be greater than 0');
                return;
            }

            try {
                const response = await fetch(`/api/users/transfer?fromEmail=${encodeURIComponent(loggedInUser.email)}&toEmail=${encodeURIComponent(toEmail)}&amount=${amount}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('transferError', 'Transfer failed. Please check amount.');
                    return;
                }

                const newBalance = await response.json();
                loggedInUser.balance = newBalance;
                updateBalance();
                showSuccess('transferSuccess');
                clearInputs(['amount']);
                document.getElementById('toEmail').value = ''; // Reset dropdown
            } catch (error) {
                showError('transferError', 'Transfer failed. Please try again.');
            }
        }

        function updateBalance() {
            if (loggedInUser) {
                document.getElementById('balance').innerText = loggedInUser.balance.toFixed(2);
            }
        }
    </script>
</body>
</html>
=== File: src/main/resources/application.properties ===
spring.application.name=bank-app

# Database connection details
spring.datasource.url=jdbc:mysql://localhost:3306/bankdb
spring.datasource.username=bankuser
spring.datasource.password=password123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#JWT details
jwt.secret=your_generated_secret_here
jwt.expiration.access=3600000
jwt.expiration.refresh=86400000

=== File: HELP.md ===
# Read Me First
The following was discovered as part of building this project:

* The original package name 'com.bank-app.bank-app' is invalid and this project uses 'com.bank_app.bank_app' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.2/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.2/maven-plugin/build-image.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.4.2/reference/web/servlet.html)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.4.2/reference/using/devtools.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


=== File: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst ===
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/BankApplication.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/config/SecurityConfig.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/controller/UserController.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/exception/GlobalExceptionHandler.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/exception/ValidationException.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/model/RefreshToken.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/model/Transaction.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/model/User.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/repository/UserRepository.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/JwtRequestFilter.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/JwtService.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/security/jwt/util/JwtSecretGenerator.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/service/BankService.java
/home/yair/git2/prjects/bank-app/src/main/java/com/bank/service/RefreshTokenService.java

=== File: target/classes/static/index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Bank</title>
    <style>
        .error { color: red; display: none; }
        .success { color: green; display: none; }
        .form-group { margin-bottom: 10px; }
        .account-section { display: none; }
        .welcome-message { font-weight: bold; margin-bottom: 10px; }
    </style>
</head>
<body>
    <h2>Simple Bank</h2>
    
    <!-- Login/Register Section -->
    <div id="authSection">
        <!-- Registration Form -->
        <h3>Register</h3>
        <div class="form-group">
            <input type="text" id="name" placeholder="Name" pattern="[A-Za-z\s]+" maxlength="50" required />
            <div id="nameError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="email" id="email" placeholder="Email" maxlength="100" required />
            <div id="emailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="tel" id="phone" placeholder="Phone (e.g., +1234567890)" 
                   pattern="\+?[1-9][0-9]{7,14}" required />
            <div id="phoneError" class="error"></div>
        </div>
        <button onclick="register()">Register</button>
        <div id="registerSuccess" class="success">Registration successful!</div>

        <!-- Login Form -->
        <h3>Login</h3>
        <div class="form-group">
            <input type="email" id="loginEmail" placeholder="Email" required />
            <div id="loginError" class="error"></div>
        </div>
        <button onclick="login()">Login</button>
    </div>

    <!-- Account Section (visible after login) -->
    <div id="accountSection" class="account-section">
        <div class="welcome-message">Welcome, <span id="userName"></span>!</div>
        <button onclick="logout()" style="float: right;">Logout</button>
        
        <h3>Account Details</h3>
        <p><strong>Balance:</strong> $<span id="balance">0.00</span></p>
        
        <!-- Transfer Funds -->
        <h3>Transfer Money</h3>
        <div class="form-group">
            <select id="toEmail" required>
                <option value="">Select recipient</option>
            </select>
            <div id="transferEmailError" class="error"></div>
        </div>
        <div class="form-group">
            <input type="number" id="amount" placeholder="Amount" min="0.01" step="0.01" required />
            <div id="transferAmountError" class="error"></div>
        </div>
        <button onclick="transfer()">Transfer</button>
        <div id="transferSuccess" class="success">Transfer successful!</div>
        <div id="transferError" class="error"></div>
    </div>

    <script>
        let loggedInUser;
        let allUsers = [];

        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        function showSuccess(elementId) {
            document.getElementById(elementId).style.display = 'block';
            setTimeout(() => {
                document.getElementById(elementId).style.display = 'none';
            }, 3000);
        }

        function clearInputs(inputs) {
            inputs.forEach(id => {
                document.getElementById(id).value = '';
            });
        }

        function validateEmail(email) {
            const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/;
            return re.test(email);
        }

        function validatePhone(phone) {
            const re = /^\+?[1-9][0-9]{7,14}$/;
            return re.test(phone);
        }

        function validateName(name) {
            const re = /^[a-zA-Z\s]{2,50}$/;
            return re.test(name);
        }

        async function register() {
            clearErrors();
            
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value.trim();
            const phone = document.getElementById('phone').value.trim();
            
            // Validate inputs
            let hasError = false;
            
            if (!validateName(name)) {
                showError('nameError', 'Name must be 2-50 characters and contain only letters and spaces');
                hasError = true;
            }
            
            if (!validateEmail(email)) {
                showError('emailError', 'Invalid email format');
                hasError = true;
            }
            
            if (!validatePhone(phone)) {
                showError('phoneError', 'Phone must be 8-15 digits and may start with +');
                hasError = true;
            }
            
            if (hasError) return;

            try {
                const response = await fetch('/api/users/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, email, phone })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    Object.keys(errorData).forEach(key => {
                        showError(`${key}Error`, errorData[key]);
                    });
                    return;
                }

                const data = await response.json();
                showSuccess('registerSuccess');
                clearInputs(['name', 'email', 'phone']);
            } catch (error) {
                showError('nameError', 'Registration failed. Please try again.');
            }
        }

        async function login() {
            clearErrors();
            const email = document.getElementById('loginEmail').value.trim();
            
            if (!validateEmail(email)) {
                showError('loginError', 'Invalid email format');
                return;
            }

            try {
                const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('loginError', 'Login failed. Please check your email.');
                    return;
                }

                loggedInUser = await response.json();
                clearInputs(['loginEmail']);
                updateBalance();
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

        async function getAllUsers() {
            try {
                const response = await fetch('/api/users/all');
                if (response.ok) {
                    allUsers = await response.json();
                    updateRecipientsList();
                }
            } catch (error) {
                console.error('Failed to fetch users:', error);
            }
        }

        function updateRecipientsList() {
            const select = document.getElementById('toEmail');
            select.innerHTML = '<option value="">Select recipient</option>';
            
            allUsers.forEach(user => {
                if (loggedInUser && user.email !== loggedInUser.email) {
                    const option = document.createElement('option');
                    option.value = user.email;
                    option.textContent = `${user.name} (${user.email})`;
                    select.appendChild(option);
                }
            });
        }

        function showAccountSection(show) {
            document.getElementById('authSection').style.display = show ? 'none' : 'block';
            document.getElementById('accountSection').style.display = show ? 'block' : 'none';
            if (show) {
                document.getElementById('userName').textContent = loggedInUser.name;
                updateBalance();
                getAllUsers(); // Fetch users for the dropdown
            }
        }

        function logout() {
            loggedInUser = null;
            showAccountSection(false);
            clearInputs(['loginEmail']);
        }

        // Previous functions remain the same
        function clearErrors() {
            document.querySelectorAll('.error').forEach(err => err.style.display = 'none');
            document.querySelectorAll('.success').forEach(success => success.style.display = 'none');
        }

        // ... (keep all the validation and utility functions)

        async function login() {
            clearErrors();
            const email = document.getElementById('loginEmail').value.trim();
            
            if (!validateEmail(email)) {
                showError('loginError', 'Invalid email format');
                return;
            }

            try {
                const response = await fetch(`/api/users/login?email=${encodeURIComponent(email)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('loginError', 'Login failed. Please check your email.');
                    return;
                }

                loggedInUser = await response.json();
                clearInputs(['loginEmail']);
                showAccountSection(true);
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

        // Update transfer function to use the dropdown
        async function transfer() {
            clearErrors();
            const toEmail = document.getElementById('toEmail').value;
            const amount = document.getElementById('amount').value;

            if (!toEmail) {
                showError('transferEmailError', 'Please select a recipient');
                return;
            }

            if (amount <= 0) {
                showError('transferAmountError', 'Amount must be greater than 0');
                return;
            }

            try {
                const response = await fetch(`/api/users/transfer?fromEmail=${encodeURIComponent(loggedInUser.email)}&toEmail=${encodeURIComponent(toEmail)}&amount=${amount}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    showError('transferError', 'Transfer failed. Please check amount.');
                    return;
                }

                const newBalance = await response.json();
                loggedInUser.balance = newBalance;
                updateBalance();
                showSuccess('transferSuccess');
                clearInputs(['amount']);
                document.getElementById('toEmail').value = ''; // Reset dropdown
            } catch (error) {
                showError('transferError', 'Transfer failed. Please try again.');
            }
        }

        function updateBalance() {
            if (loggedInUser) {
                document.getElementById('balance').innerText = loggedInUser.balance.toFixed(2);
            }
        }
    </script>
</body>
</html>
=== File: target/classes/application.properties ===
spring.application.name=bank-app

# Database connection details
spring.datasource.url=jdbc:mysql://localhost:3306/bankdb
spring.datasource.username=bankuser
spring.datasource.password=password123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#JWT details
jwt.secret=your_generated_secret_here
jwt.expiration.access=3600000
jwt.expiration.refresh=86400000

=== File: target/test-classes/application-test.properties ===
// src/test/resources/application.properties
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
=== File: mvnw.cmd ===
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

=== File: mvnw ===
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

=== File: pom.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.bank-app</groupId>
	<artifactId>bank-app</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>bank-app</name>
	<description>basic bank app</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		 <!-- Spring Boot Starter Data JPA for DB interactions -->
    	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

    <!-- MySQL Driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.28</version> <!-- Add the version number here -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
    		<groupId>org.springframework.boot</groupId>
    	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.11.4</version>
			<scope>test</scope>
		</dependency>
		 <dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
 		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>				
				</plugin>
		</plugins>

	</build>

</project>
